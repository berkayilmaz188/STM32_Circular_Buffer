
RING_BUFFER_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c5c  08005c5c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c64  08005c64  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000068  08005cd4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005cd4  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef56  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002523  00000000  00000000  0002f031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00031558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7f  00000000  00000000  000322d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bb5  00000000  00000000  00032d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d4d  00000000  00000000  0004a90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f2b2  00000000  00000000  0005b659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004440  00000000  00000000  000ea90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000eed4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005984 	.word	0x08005984

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005984 	.word	0x08005984

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Circular_Buffer_Init>:
/******************************************************************************/

/**
  * @brief This function initialize Circular Buffer struct.
  */
void Circular_Buffer_Init(CIRCULAR_BUFFERS_InitTypeDef *circular_buffer, uint16_t max_size){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
	circular_buffer->size = max_size;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	887a      	ldrh	r2, [r7, #2]
 80005bc:	815a      	strh	r2, [r3, #10]
	circular_buffer->data = (uint8_t*)calloc(circular_buffer->size,sizeof(uint8_t));
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	895b      	ldrh	r3, [r3, #10]
 80005c2:	2101      	movs	r1, #1
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 ff59 	bl	800447c <calloc>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
	circular_buffer->num_Entries = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	811a      	strh	r2, [r3, #8]
	circular_buffer->head = 0;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	809a      	strh	r2, [r3, #4]
	circular_buffer->tail = 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	80da      	strh	r2, [r3, #6]
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <Circular_Buffer_IsEmpty>:

/**
  * @brief This function check is circular buffer empty or not.
  */
CIRCULAR_BUFFER_StateTypeDef Circular_Buffer_IsEmpty(CIRCULAR_BUFFERS_InitTypeDef *circular_buffer){
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	return (circular_buffer->num_Entries == 0) ? CIRCULAR_BUFFER_STATE_EMPTY : CIRCULAR_BUFFER_STATE_FULL;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	891b      	ldrh	r3, [r3, #8]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf14      	ite	ne
 80005fc:	2301      	movne	r3, #1
 80005fe:	2300      	moveq	r3, #0
 8000600:	b2db      	uxtb	r3, r3
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <Circular_Buffer_IsFull>:

/**
  * @brief This function check is circular buffer full or not.
  */
CIRCULAR_BUFFER_StateTypeDef Circular_Buffer_IsFull(CIRCULAR_BUFFERS_InitTypeDef *circular_buffer){
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
	return (circular_buffer->num_Entries == circular_buffer->size) ? CIRCULAR_BUFFER_STATE_FULL : CIRCULAR_BUFFER_STATE_EMPTY;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	891a      	ldrh	r2, [r3, #8]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	895b      	ldrh	r3, [r3, #10]
 800061e:	429a      	cmp	r2, r3
 8000620:	bf0c      	ite	eq
 8000622:	2301      	moveq	r3, #1
 8000624:	2300      	movne	r3, #0
 8000626:	b2db      	uxtb	r3, r3
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <Circular_Buffer_Queue>:

/**
  * @brief This function append data to circular buffer and check the tail index value.
  */
CIRCULAR_BUFFER_StateTypeDef Circular_Buffer_Queue(CIRCULAR_BUFFERS_InitTypeDef *circular_buffer, uint8_t *value){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	if(Circular_Buffer_IsFull(circular_buffer) == CIRCULAR_BUFFER_STATE_FULL){
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ffe5 	bl	800060e <Circular_Buffer_IsFull>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d101      	bne.n	800064e <Circular_Buffer_Queue+0x1a>
		return CIRCULAR_BUFFER_STATE_ERROR;
 800064a:	2303      	movs	r3, #3
 800064c:	e01b      	b.n	8000686 <Circular_Buffer_Queue+0x52>
	}
	else{
		circular_buffer->data[circular_buffer->head++] = *value;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	889b      	ldrh	r3, [r3, #4]
 8000656:	1c59      	adds	r1, r3, #1
 8000658:	b288      	uxth	r0, r1
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	8088      	strh	r0, [r1, #4]
 800065e:	4413      	add	r3, r2
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	7812      	ldrb	r2, [r2, #0]
 8000664:	701a      	strb	r2, [r3, #0]
		circular_buffer->num_Entries++;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	891b      	ldrh	r3, [r3, #8]
 800066a:	3301      	adds	r3, #1
 800066c:	b29a      	uxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	811a      	strh	r2, [r3, #8]
		if(circular_buffer->head >= circular_buffer->size){
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	889a      	ldrh	r2, [r3, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	895b      	ldrh	r3, [r3, #10]
 800067a:	429a      	cmp	r2, r3
 800067c:	d302      	bcc.n	8000684 <Circular_Buffer_Queue+0x50>
			circular_buffer->head = 0;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	809a      	strh	r2, [r3, #4]
		}
		return CIRCULAR_BUFFER_STATE_OK;
 8000684:	2302      	movs	r3, #2
	}
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <Circular_Buffer_Dequeue>:

/**
  * @brief This function read data to circular buffer and check the head index value.
  */
CIRCULAR_BUFFER_StateTypeDef Circular_Buffer_Dequeue(CIRCULAR_BUFFERS_InitTypeDef *circular_buffer, uint8_t *data){
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
	if(Circular_Buffer_IsEmpty(circular_buffer) == CIRCULAR_BUFFER_STATE_EMPTY){
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ffa7 	bl	80005ec <Circular_Buffer_IsEmpty>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <Circular_Buffer_Dequeue+0x1a>
		return CIRCULAR_BUFFER_STATE_ERROR;
 80006a4:	2303      	movs	r3, #3
 80006a6:	e01b      	b.n	80006e0 <Circular_Buffer_Dequeue+0x52>
	}
	else{
		*data = circular_buffer->data[circular_buffer->tail++];
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	88db      	ldrh	r3, [r3, #6]
 80006b0:	1c59      	adds	r1, r3, #1
 80006b2:	b288      	uxth	r0, r1
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	80c8      	strh	r0, [r1, #6]
 80006b8:	4413      	add	r3, r2
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	701a      	strb	r2, [r3, #0]
		circular_buffer->num_Entries--;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	891b      	ldrh	r3, [r3, #8]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	811a      	strh	r2, [r3, #8]
		if(circular_buffer->tail >= circular_buffer->size){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	88da      	ldrh	r2, [r3, #6]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	895b      	ldrh	r3, [r3, #10]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d302      	bcc.n	80006de <Circular_Buffer_Dequeue+0x50>
			circular_buffer->tail = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	80da      	strh	r2, [r3, #6]
		}
		return CIRCULAR_BUFFER_STATE_OK;
 80006de:	2302      	movs	r3, #2
	}
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <queue_read>:
/**
  * @brief This function read data to circular buffer and check the read.
  */
void queue_read(UART_HandleTypeDef *huart, CIRCULAR_BUFFERS_InitTypeDef *circular_buffer, QUEUE_InitTypeDef *queue, uint8_t *rxTempData){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]

	if(Circular_Buffer_Queue(circular_buffer, &rxTempData[0]) == CIRCULAR_BUFFER_STATE_ERROR){
 80006f6:	6839      	ldr	r1, [r7, #0]
 80006f8:	68b8      	ldr	r0, [r7, #8]
 80006fa:	f7ff ff9b 	bl	8000634 <Circular_Buffer_Queue>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b03      	cmp	r3, #3
 8000702:	d101      	bne.n	8000708 <queue_read+0x20>
		Error_Handler();
 8000704:	f000 fae8 	bl	8000cd8 <Error_Handler>
	}


	if(rxTempData[0] == '\n'){
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b0a      	cmp	r3, #10
 800070e:	f040 80ce 	bne.w	80008ae <queue_read+0x1c6>
		if(circular_buffer->tail < circular_buffer->head){
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	88da      	ldrh	r2, [r3, #6]
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	889b      	ldrh	r3, [r3, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	d237      	bcs.n	800078e <queue_read+0xa6>
			for (uint8_t i = circular_buffer->tail ; i < circular_buffer->head ; i++) {
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	88db      	ldrh	r3, [r3, #6]
 8000722:	75fb      	strb	r3, [r7, #23]
 8000724:	e02c      	b.n	8000780 <queue_read+0x98>
				if(queue->indexData < 20){
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	799b      	ldrb	r3, [r3, #6]
 800072a:	2b13      	cmp	r3, #19
 800072c:	d81a      	bhi.n	8000764 <queue_read+0x7c>
					if(Circular_Buffer_Dequeue(circular_buffer, &(queue->queue[queue->indexQueue].datas[queue->indexData++])) == CIRCULAR_BUFFER_STATE_ERROR){
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	795b      	ldrb	r3, [r3, #5]
 8000736:	4619      	mov	r1, r3
 8000738:	460b      	mov	r3, r1
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	440b      	add	r3, r1
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	441a      	add	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	799b      	ldrb	r3, [r3, #6]
 8000746:	1c59      	adds	r1, r3, #1
 8000748:	b2c8      	uxtb	r0, r1
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	7188      	strb	r0, [r1, #6]
 800074e:	4413      	add	r3, r2
 8000750:	4619      	mov	r1, r3
 8000752:	68b8      	ldr	r0, [r7, #8]
 8000754:	f7ff ff9b 	bl	800068e <Circular_Buffer_Dequeue>
 8000758:	4603      	mov	r3, r0
 800075a:	2b03      	cmp	r3, #3
 800075c:	d10d      	bne.n	800077a <queue_read+0x92>
						Error_Handler();
 800075e:	f000 fabb 	bl	8000cd8 <Error_Handler>
 8000762:	e00a      	b.n	800077a <queue_read+0x92>
					}
				}
				else{
					uint8_t tempData;
					if(Circular_Buffer_Dequeue(circular_buffer, &tempData) == CIRCULAR_BUFFER_STATE_ERROR){
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	68b8      	ldr	r0, [r7, #8]
 800076c:	f7ff ff8f 	bl	800068e <Circular_Buffer_Dequeue>
 8000770:	4603      	mov	r3, r0
 8000772:	2b03      	cmp	r3, #3
 8000774:	d101      	bne.n	800077a <queue_read+0x92>
						Error_Handler();
 8000776:	f000 faaf 	bl	8000cd8 <Error_Handler>
			for (uint8_t i = circular_buffer->tail ; i < circular_buffer->head ; i++) {
 800077a:	7dfb      	ldrb	r3, [r7, #23]
 800077c:	3301      	adds	r3, #1
 800077e:	75fb      	strb	r3, [r7, #23]
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	b29a      	uxth	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	889b      	ldrh	r3, [r3, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	d3cc      	bcc.n	8000726 <queue_read+0x3e>
 800078c:	e072      	b.n	8000874 <queue_read+0x18c>
					}
				}
			}
		}

		else if(circular_buffer->tail > circular_buffer->head){
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	88da      	ldrh	r2, [r3, #6]
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	889b      	ldrh	r3, [r3, #4]
 8000796:	429a      	cmp	r2, r3
 8000798:	d96c      	bls.n	8000874 <queue_read+0x18c>
			uint8_t tempData;

			for (uint8_t i = circular_buffer->tail ; i < circular_buffer->size ; i++) {
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	88db      	ldrh	r3, [r3, #6]
 800079e:	75bb      	strb	r3, [r7, #22]
 80007a0:	e02c      	b.n	80007fc <queue_read+0x114>
				if(queue->indexData < 20){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	799b      	ldrb	r3, [r3, #6]
 80007a6:	2b13      	cmp	r3, #19
 80007a8:	d81a      	bhi.n	80007e0 <queue_read+0xf8>
					if(Circular_Buffer_Dequeue(circular_buffer, &(queue->queue[queue->indexQueue].datas[queue->indexData++])) == CIRCULAR_BUFFER_STATE_ERROR){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	795b      	ldrb	r3, [r3, #5]
 80007b2:	4619      	mov	r1, r3
 80007b4:	460b      	mov	r3, r1
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	440b      	add	r3, r1
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	441a      	add	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	799b      	ldrb	r3, [r3, #6]
 80007c2:	1c59      	adds	r1, r3, #1
 80007c4:	b2c8      	uxtb	r0, r1
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	7188      	strb	r0, [r1, #6]
 80007ca:	4413      	add	r3, r2
 80007cc:	4619      	mov	r1, r3
 80007ce:	68b8      	ldr	r0, [r7, #8]
 80007d0:	f7ff ff5d 	bl	800068e <Circular_Buffer_Dequeue>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d10d      	bne.n	80007f6 <queue_read+0x10e>
						Error_Handler();
 80007da:	f000 fa7d 	bl	8000cd8 <Error_Handler>
 80007de:	e00a      	b.n	80007f6 <queue_read+0x10e>
					}
				}
				else{
					if(Circular_Buffer_Dequeue(circular_buffer, &tempData) == CIRCULAR_BUFFER_STATE_ERROR){
 80007e0:	f107 0313 	add.w	r3, r7, #19
 80007e4:	4619      	mov	r1, r3
 80007e6:	68b8      	ldr	r0, [r7, #8]
 80007e8:	f7ff ff51 	bl	800068e <Circular_Buffer_Dequeue>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d101      	bne.n	80007f6 <queue_read+0x10e>
						Error_Handler();
 80007f2:	f000 fa71 	bl	8000cd8 <Error_Handler>
			for (uint8_t i = circular_buffer->tail ; i < circular_buffer->size ; i++) {
 80007f6:	7dbb      	ldrb	r3, [r7, #22]
 80007f8:	3301      	adds	r3, #1
 80007fa:	75bb      	strb	r3, [r7, #22]
 80007fc:	7dbb      	ldrb	r3, [r7, #22]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	895b      	ldrh	r3, [r3, #10]
 8000804:	429a      	cmp	r2, r3
 8000806:	d3cc      	bcc.n	80007a2 <queue_read+0xba>
					}
				}
			}

			for (uint8_t i = 0 ; i < circular_buffer->head ; i++) {
 8000808:	2300      	movs	r3, #0
 800080a:	757b      	strb	r3, [r7, #21]
 800080c:	e02c      	b.n	8000868 <queue_read+0x180>
				if(queue->indexData < 20){
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	799b      	ldrb	r3, [r3, #6]
 8000812:	2b13      	cmp	r3, #19
 8000814:	d81a      	bhi.n	800084c <queue_read+0x164>
					if(Circular_Buffer_Dequeue(circular_buffer, &(queue->queue[queue->indexQueue].datas[queue->indexData++])) == CIRCULAR_BUFFER_STATE_ERROR){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	4619      	mov	r1, r3
 8000820:	460b      	mov	r3, r1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	440b      	add	r3, r1
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	441a      	add	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	799b      	ldrb	r3, [r3, #6]
 800082e:	1c59      	adds	r1, r3, #1
 8000830:	b2c8      	uxtb	r0, r1
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	7188      	strb	r0, [r1, #6]
 8000836:	4413      	add	r3, r2
 8000838:	4619      	mov	r1, r3
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff ff27 	bl	800068e <Circular_Buffer_Dequeue>
 8000840:	4603      	mov	r3, r0
 8000842:	2b03      	cmp	r3, #3
 8000844:	d10d      	bne.n	8000862 <queue_read+0x17a>
						Error_Handler();
 8000846:	f000 fa47 	bl	8000cd8 <Error_Handler>
 800084a:	e00a      	b.n	8000862 <queue_read+0x17a>
					}
				}
				else{
					uint8_t tempData;
					if(Circular_Buffer_Dequeue(circular_buffer, &tempData) == CIRCULAR_BUFFER_STATE_ERROR){
 800084c:	f107 0312 	add.w	r3, r7, #18
 8000850:	4619      	mov	r1, r3
 8000852:	68b8      	ldr	r0, [r7, #8]
 8000854:	f7ff ff1b 	bl	800068e <Circular_Buffer_Dequeue>
 8000858:	4603      	mov	r3, r0
 800085a:	2b03      	cmp	r3, #3
 800085c:	d101      	bne.n	8000862 <queue_read+0x17a>
						Error_Handler();
 800085e:	f000 fa3b 	bl	8000cd8 <Error_Handler>
			for (uint8_t i = 0 ; i < circular_buffer->head ; i++) {
 8000862:	7d7b      	ldrb	r3, [r7, #21]
 8000864:	3301      	adds	r3, #1
 8000866:	757b      	strb	r3, [r7, #21]
 8000868:	7d7b      	ldrb	r3, [r7, #21]
 800086a:	b29a      	uxth	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	889b      	ldrh	r3, [r3, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	d3cc      	bcc.n	800080e <queue_read+0x126>
					}
				}
			}
		}

		queue->queue[queue->indexQueue].flag = QUEUE_STATE_FULL;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	795b      	ldrb	r3, [r3, #5]
 800087c:	4619      	mov	r1, r3
 800087e:	460b      	mov	r3, r1
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	440b      	add	r3, r1
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4413      	add	r3, r2
 8000888:	2201      	movs	r2, #1
 800088a:	615a      	str	r2, [r3, #20]
		if(queue->indexQueue >= QUEUE_SIZE - 1){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	2b0e      	cmp	r3, #14
 8000892:	d903      	bls.n	800089c <queue_read+0x1b4>
			queue->indexQueue = 0;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	715a      	strb	r2, [r3, #5]
 800089a:	e005      	b.n	80008a8 <queue_read+0x1c0>
		}
		else{
			queue->indexQueue++;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	795b      	ldrb	r3, [r3, #5]
 80008a0:	3301      	adds	r3, #1
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	715a      	strb	r2, [r3, #5]
		}
		queue->indexData = 0;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	719a      	strb	r2, [r3, #6]
	}
	HAL_UART_Receive_IT(huart, rxTempData, 1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	6839      	ldr	r1, [r7, #0]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f002 fe45 	bl	8003542 <HAL_UART_Receive_IT>
}
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fed4 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f83a 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 f942 	bl	8000b54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d0:	f000 f916 	bl	8000b00 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008d4:	f000 f89e 	bl	8000a14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008d8:	2100      	movs	r1, #0
 80008da:	4812      	ldr	r0, [pc, #72]	; (8000924 <main+0x64>)
 80008dc:	f001 ffde 	bl	800289c <HAL_TIM_PWM_Start>

  UART_Flags_Init(&flags_States);
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <main+0x68>)
 80008e2:	f000 f9ff 	bl	8000ce4 <UART_Flags_Init>


  Circular_Buffer_Init(&circular_buffer, circular_buffer_Size);
 80008e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ea:	4810      	ldr	r0, [pc, #64]	; (800092c <main+0x6c>)
 80008ec:	f7ff fe5e 	bl	80005ac <Circular_Buffer_Init>
  Queue_Init(&queue, QUEUE_SIZE);
 80008f0:	2110      	movs	r1, #16
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <main+0x70>)
 80008f4:	f000 fc06 	bl	8001104 <Queue_Init>

  HAL_UART_Receive_IT(&huart2, rxTempData, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	490e      	ldr	r1, [pc, #56]	; (8000934 <main+0x74>)
 80008fc:	480e      	ldr	r0, [pc, #56]	; (8000938 <main+0x78>)
 80008fe:	f002 fe20 	bl	8003542 <HAL_UART_Receive_IT>

  HAL_UART_Transmit(&huart2,(uint8_t *)"Application Started.\r\n", 22,HAL_MAX_DELAY);
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	2216      	movs	r2, #22
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <main+0x7c>)
 800090a:	480b      	ldr	r0, [pc, #44]	; (8000938 <main+0x78>)
 800090c:	f002 fd87 	bl	800341e <HAL_UART_Transmit>
		  CheckReceiveData();
		  CheckParameterData();
		  CheckFlags();
	  }
	  CheckFunctions();*/
	  Queue_Check(&queue);
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <main+0x70>)
 8000912:	f000 fc2b 	bl	800116c <Queue_Check>
	  //TryData(&queue);
	  Queue_Process_LED(&queue);
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <main+0x70>)
 8000918:	f000 fa2c 	bl	8000d74 <Queue_Process_LED>
	  CheckFunctions();
 800091c:	f000 fb54 	bl	8000fc8 <CheckFunctions>
	  Queue_Check(&queue);
 8000920:	e7f6      	b.n	8000910 <main+0x50>
 8000922:	bf00      	nop
 8000924:	20000084 	.word	0x20000084
 8000928:	20000110 	.word	0x20000110
 800092c:	20000114 	.word	0x20000114
 8000930:	20000120 	.word	0x20000120
 8000934:	20000128 	.word	0x20000128
 8000938:	200000cc 	.word	0x200000cc
 800093c:	0800599c 	.word	0x0800599c

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	; 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f003 fffd 	bl	800494e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <SystemClock_Config+0xcc>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <SystemClock_Config+0xcc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800098c:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <SystemClock_Config+0xd0>)
 800098e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <SystemClock_Config+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009b4:	2308      	movs	r3, #8
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80009b8:	2354      	movs	r3, #84	; 0x54
 80009ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fa27 	bl	8001e1c <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009d4:	f000 f980 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2302      	movs	r3, #2
 80009de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2102      	movs	r1, #2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fc89 	bl	800230c <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a00:	f000 f96a 	bl	8000cd8 <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3750      	adds	r7, #80	; 0x50
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a44:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a4e:	f240 3247 	movw	r2, #839	; 0x347
 8000a52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a6e:	4823      	ldr	r0, [pc, #140]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a70:	f001 fe6c 	bl	800274c <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f92d 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481c      	ldr	r0, [pc, #112]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a8c:	f002 f878 	bl	8002b80 <HAL_TIM_ConfigClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a96:	f000 f91f 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a9c:	f001 fea5 	bl	80027ea <HAL_TIM_PWM_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000aa6:	f000 f917 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000aba:	f002 fbf5 	bl	80032a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ac4:	f000 f908 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac8:	2360      	movs	r3, #96	; 0x60
 8000aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000ae0:	f001 ff8c 	bl	80029fc <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000aea:	f000 f8f5 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000af0:	f000 fbf8 	bl	80012e4 <HAL_TIM_MspPostInit>

}
 8000af4:	bf00      	nop
 8000af6:	3738      	adds	r7, #56	; 0x38
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000084 	.word	0x20000084

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_USART2_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b38:	f002 fc24 	bl	8003384 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f8c9 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000cc 	.word	0x200000cc
 8000b50:	40004400 	.word	0x40004400

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_GPIO_Init+0xa0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <MX_GPIO_Init+0xa0>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_GPIO_Init+0xa0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_GPIO_Init+0xa0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <MX_GPIO_Init+0xa0>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_GPIO_Init+0xa0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_GPIO_Init+0xa0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_GPIO_Init+0xa0>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_GPIO_Init+0xa0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <MX_GPIO_Init+0xa4>)
 8000bd6:	f000 ff85 	bl	8001ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2028      	movs	r0, #40	; 0x28
 8000be0:	f000 feb7 	bl	8001952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000be4:	2028      	movs	r0, #40	; 0x28
 8000be6:	f000 fed0 	bl	800198a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bea:	bf00      	nop
 8000bec:	3720      	adds	r7, #32
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020800 	.word	0x40020800

08000bfc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	queue_read(huart, &circular_buffer, &queue, rxTempData);
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <HAL_UART_RxCpltCallback+0x1c>)
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <HAL_UART_RxCpltCallback+0x20>)
 8000c08:	4905      	ldr	r1, [pc, #20]	; (8000c20 <HAL_UART_RxCpltCallback+0x24>)
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fd6c 	bl	80006e8 <queue_read>

}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000128 	.word	0x20000128
 8000c1c:	20000120 	.word	0x20000120
 8000c20:	20000114 	.word	0x20000114

08000c24 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c24:	b5b0      	push	{r4, r5, r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
  uint8_t tx[] = "Button Falling Interrupt\r\n";
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c30:	f107 040c 	add.w	r4, r7, #12
 8000c34:	461d      	mov	r5, r3
 8000c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3e:	c403      	stmia	r4!, {r0, r1}
 8000c40:	8022      	strh	r2, [r4, #0]
 8000c42:	3402      	adds	r4, #2
 8000c44:	0c13      	lsrs	r3, r2, #16
 8000c46:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2,tx,sizeof(tx),HAL_MAX_DELAY);
 8000c48:	f107 010c 	add.w	r1, r7, #12
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	221b      	movs	r2, #27
 8000c52:	481e      	ldr	r0, [pc, #120]	; (8000ccc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c54:	f002 fbe3 	bl	800341e <HAL_UART_Transmit>
  if(flags_States.state_Led == STATE_LED_FIRST){
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10a      	bne.n	8000c7c <HAL_GPIO_EXTI_Callback+0x58>
	  delayMs = BLINK_RATE_MEDIUM;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c6c:	601a      	str	r2, [r3, #0]
	  flags_States.state_Led = STATE_LED_SECOND;
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c70:	7853      	ldrb	r3, [r2, #1]
 8000c72:	2101      	movs	r1, #1
 8000c74:	f361 0383 	bfi	r3, r1, #2, #2
 8000c78:	7053      	strb	r3, [r2, #1]
  }
  else if(flags_States.state_Led == STATE_LED_THIRD){
  	  delayMs = BLINK_RATE_LOW;
  	  flags_States.state_Led = STATE_LED_FIRST;
  }
}
 8000c7a:	e020      	b.n	8000cbe <HAL_GPIO_EXTI_Callback+0x9a>
  else if(flags_States.state_Led == STATE_LED_SECOND){
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c7e:	785b      	ldrb	r3, [r3, #1]
 8000c80:	f003 030c 	and.w	r3, r3, #12
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d109      	bne.n	8000c9e <HAL_GPIO_EXTI_Callback+0x7a>
  	  delayMs = BLINK_RATE_HIGH;
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c8c:	22c8      	movs	r2, #200	; 0xc8
 8000c8e:	601a      	str	r2, [r3, #0]
  	  flags_States.state_Led = STATE_LED_THIRD;
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c92:	7853      	ldrb	r3, [r2, #1]
 8000c94:	2102      	movs	r1, #2
 8000c96:	f361 0383 	bfi	r3, r1, #2, #2
 8000c9a:	7053      	strb	r3, [r2, #1]
}
 8000c9c:	e00f      	b.n	8000cbe <HAL_GPIO_EXTI_Callback+0x9a>
  else if(flags_States.state_Led == STATE_LED_THIRD){
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000ca0:	785b      	ldrb	r3, [r3, #1]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d108      	bne.n	8000cbe <HAL_GPIO_EXTI_Callback+0x9a>
  	  delayMs = BLINK_RATE_LOW;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000cae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cb2:	601a      	str	r2, [r3, #0]
  	  flags_States.state_Led = STATE_LED_FIRST;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000cb6:	7853      	ldrb	r3, [r2, #1]
 8000cb8:	f36f 0383 	bfc	r3, #2, #2
 8000cbc:	7053      	strb	r3, [r2, #1]
}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	080059b4 	.word	0x080059b4
 8000ccc:	200000cc 	.word	0x200000cc
 8000cd0:	20000110 	.word	0x20000110
 8000cd4:	2000012c 	.word	0x2000012c

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <UART_Flags_Init>:

/******************************************************************************/
/*           				 Special UART Functions 				          */
/******************************************************************************/

void UART_Flags_Init(FLAGS_STATES *flags_States){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	flags_States->flag_LedOn = FLAG_STATE_RESET;
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	7813      	ldrb	r3, [r2, #0]
 8000cf0:	f36f 0300 	bfc	r3, #0, #1
 8000cf4:	7013      	strb	r3, [r2, #0]
	flags_States->flag_LedOff = FLAG_STATE_RESET;
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	7813      	ldrb	r3, [r2, #0]
 8000cfa:	f36f 0341 	bfc	r3, #1, #1
 8000cfe:	7013      	strb	r3, [r2, #0]
	flags_States->flag_LedBlink = FLAG_STATE_RESET;
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	7813      	ldrb	r3, [r2, #0]
 8000d04:	f36f 0382 	bfc	r3, #2, #1
 8000d08:	7013      	strb	r3, [r2, #0]
	flags_States->flag_LedPWM = FLAG_STATE_RESET;
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	7813      	ldrb	r3, [r2, #0]
 8000d0e:	f36f 03c3 	bfc	r3, #3, #1
 8000d12:	7013      	strb	r3, [r2, #0]
	flags_States->flag_UARTCallBack = FLAG_STATE_RESET;
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	7813      	ldrb	r3, [r2, #0]
 8000d18:	f36f 1304 	bfc	r3, #4, #1
 8000d1c:	7013      	strb	r3, [r2, #0]
	flags_States->flag_UART_LedOn = FLAG_STATE_RESET;
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	7813      	ldrb	r3, [r2, #0]
 8000d22:	f36f 1345 	bfc	r3, #5, #1
 8000d26:	7013      	strb	r3, [r2, #0]
	flags_States->flag_UART_LedOff = FLAG_STATE_RESET;
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	7813      	ldrb	r3, [r2, #0]
 8000d2c:	f36f 1386 	bfc	r3, #6, #1
 8000d30:	7013      	strb	r3, [r2, #0]
	flags_States->flag_UART_LedBlink = FLAG_STATE_RESET;
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	7813      	ldrb	r3, [r2, #0]
 8000d36:	f36f 13c7 	bfc	r3, #7, #1
 8000d3a:	7013      	strb	r3, [r2, #0]
	flags_States->flag_UART_LedPWM = FLAG_STATE_RESET;
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	7853      	ldrb	r3, [r2, #1]
 8000d40:	f36f 0300 	bfc	r3, #0, #1
 8000d44:	7053      	strb	r3, [r2, #1]
	flags_States->flag_Parameter = FLAG_STATE_RESET;
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	7853      	ldrb	r3, [r2, #1]
 8000d4a:	f36f 0341 	bfc	r3, #1, #1
 8000d4e:	7053      	strb	r3, [r2, #1]
	flags_States->state_Led = STATE_LED_FIRST;
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	7853      	ldrb	r3, [r2, #1]
 8000d54:	f36f 0383 	bfc	r3, #2, #2
 8000d58:	7053      	strb	r3, [r2, #1]
	delayMs = BLINK_RATE_LOW;
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <UART_Flags_Init+0x8c>)
 8000d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d60:	601a      	str	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000012c 	.word	0x2000012c

08000d74 <Queue_Process_LED>:

void Queue_Process_LED(QUEUE_InitTypeDef *queue){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    char *token;
    char *str;

    for (int i = 0; i < QUEUE_SIZE; i++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d80:	e109      	b.n	8000f96 <Queue_Process_LED+0x222>
        if(queue->queue[i].flag == QUEUE_STATE_FULL){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6819      	ldr	r1, [r3, #0]
 8000d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 80fb 	bne.w	8000f90 <Queue_Process_LED+0x21c>
            //Data işleme queue içi
            char dataStr[21]; // Null için 1 ekledim
            strncpy(dataStr, (char*)queue->queue[i].datas, 20); // que size i 20 oldugundan
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	4619      	mov	r1, r3
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2214      	movs	r2, #20
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fdd3 	bl	800495e <strncpy>
            dataStr[20] = '\0';
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 3020 	strb.w	r3, [r7, #32]
            str = dataStr;
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
            token = strtok(str, " ");
 8000dc4:	4978      	ldr	r1, [pc, #480]	; (8000fa8 <Queue_Process_LED+0x234>)
 8000dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dc8:	f003 fddc 	bl	8004984 <strtok>
 8000dcc:	6278      	str	r0, [r7, #36]	; 0x24

            // set all flags to RESET
            flags_States.flag_UART_LedBlink = FLAG_STATE_RESET;
 8000dce:	4a77      	ldr	r2, [pc, #476]	; (8000fac <Queue_Process_LED+0x238>)
 8000dd0:	7813      	ldrb	r3, [r2, #0]
 8000dd2:	f36f 13c7 	bfc	r3, #7, #1
 8000dd6:	7013      	strb	r3, [r2, #0]
            flags_States.flag_UART_LedOn = FLAG_STATE_RESET;
 8000dd8:	4a74      	ldr	r2, [pc, #464]	; (8000fac <Queue_Process_LED+0x238>)
 8000dda:	7813      	ldrb	r3, [r2, #0]
 8000ddc:	f36f 1345 	bfc	r3, #5, #1
 8000de0:	7013      	strb	r3, [r2, #0]
            flags_States.flag_UART_LedOff = FLAG_STATE_RESET;
 8000de2:	4a72      	ldr	r2, [pc, #456]	; (8000fac <Queue_Process_LED+0x238>)
 8000de4:	7813      	ldrb	r3, [r2, #0]
 8000de6:	f36f 1386 	bfc	r3, #6, #1
 8000dea:	7013      	strb	r3, [r2, #0]
            flags_States.flag_UART_LedPWM = FLAG_STATE_RESET;
 8000dec:	4a6f      	ldr	r2, [pc, #444]	; (8000fac <Queue_Process_LED+0x238>)
 8000dee:	7853      	ldrb	r3, [r2, #1]
 8000df0:	f36f 0300 	bfc	r3, #0, #1
 8000df4:	7053      	strb	r3, [r2, #1]

            if(!strcmp(token, "Blink")){
 8000df6:	496e      	ldr	r1, [pc, #440]	; (8000fb0 <Queue_Process_LED+0x23c>)
 8000df8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dfa:	f7ff f9f1 	bl	80001e0 <strcmp>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d114      	bne.n	8000e2e <Queue_Process_LED+0xba>
                flags_States.flag_LedBlink = FLAG_STATE_SET;
 8000e04:	4a69      	ldr	r2, [pc, #420]	; (8000fac <Queue_Process_LED+0x238>)
 8000e06:	7813      	ldrb	r3, [r2, #0]
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedOn = FLAG_STATE_RESET;
 8000e0e:	4a67      	ldr	r2, [pc, #412]	; (8000fac <Queue_Process_LED+0x238>)
 8000e10:	7813      	ldrb	r3, [r2, #0]
 8000e12:	f36f 0300 	bfc	r3, #0, #1
 8000e16:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedOff = FLAG_STATE_RESET;
 8000e18:	4a64      	ldr	r2, [pc, #400]	; (8000fac <Queue_Process_LED+0x238>)
 8000e1a:	7813      	ldrb	r3, [r2, #0]
 8000e1c:	f36f 0341 	bfc	r3, #1, #1
 8000e20:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedPWM = FLAG_STATE_RESET;
 8000e22:	4a62      	ldr	r2, [pc, #392]	; (8000fac <Queue_Process_LED+0x238>)
 8000e24:	7813      	ldrb	r3, [r2, #0]
 8000e26:	f36f 03c3 	bfc	r3, #3, #1
 8000e2a:	7013      	strb	r3, [r2, #0]
 8000e2c:	e08c      	b.n	8000f48 <Queue_Process_LED+0x1d4>
            }
            else if(!strcmp(token, "LedOn")){
 8000e2e:	4961      	ldr	r1, [pc, #388]	; (8000fb4 <Queue_Process_LED+0x240>)
 8000e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e32:	f7ff f9d5 	bl	80001e0 <strcmp>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d114      	bne.n	8000e66 <Queue_Process_LED+0xf2>
                flags_States.flag_LedOn = FLAG_STATE_SET;
 8000e3c:	4a5b      	ldr	r2, [pc, #364]	; (8000fac <Queue_Process_LED+0x238>)
 8000e3e:	7813      	ldrb	r3, [r2, #0]
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedOff = FLAG_STATE_RESET;
 8000e46:	4a59      	ldr	r2, [pc, #356]	; (8000fac <Queue_Process_LED+0x238>)
 8000e48:	7813      	ldrb	r3, [r2, #0]
 8000e4a:	f36f 0341 	bfc	r3, #1, #1
 8000e4e:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedPWM = FLAG_STATE_RESET;
 8000e50:	4a56      	ldr	r2, [pc, #344]	; (8000fac <Queue_Process_LED+0x238>)
 8000e52:	7813      	ldrb	r3, [r2, #0]
 8000e54:	f36f 03c3 	bfc	r3, #3, #1
 8000e58:	7013      	strb	r3, [r2, #0]
    		    flags_States.flag_LedBlink = FLAG_STATE_RESET;
 8000e5a:	4a54      	ldr	r2, [pc, #336]	; (8000fac <Queue_Process_LED+0x238>)
 8000e5c:	7813      	ldrb	r3, [r2, #0]
 8000e5e:	f36f 0382 	bfc	r3, #2, #1
 8000e62:	7013      	strb	r3, [r2, #0]
 8000e64:	e070      	b.n	8000f48 <Queue_Process_LED+0x1d4>
            }
            else if(!strcmp(token, "LedOff")){
 8000e66:	4954      	ldr	r1, [pc, #336]	; (8000fb8 <Queue_Process_LED+0x244>)
 8000e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e6a:	f7ff f9b9 	bl	80001e0 <strcmp>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d114      	bne.n	8000e9e <Queue_Process_LED+0x12a>
                flags_States.flag_LedOn = FLAG_STATE_RESET;
 8000e74:	4a4d      	ldr	r2, [pc, #308]	; (8000fac <Queue_Process_LED+0x238>)
 8000e76:	7813      	ldrb	r3, [r2, #0]
 8000e78:	f36f 0300 	bfc	r3, #0, #1
 8000e7c:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedOff = FLAG_STATE_SET;
 8000e7e:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <Queue_Process_LED+0x238>)
 8000e80:	7813      	ldrb	r3, [r2, #0]
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedPWM = FLAG_STATE_RESET;
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <Queue_Process_LED+0x238>)
 8000e8a:	7813      	ldrb	r3, [r2, #0]
 8000e8c:	f36f 03c3 	bfc	r3, #3, #1
 8000e90:	7013      	strb	r3, [r2, #0]
    		    flags_States.flag_LedBlink = FLAG_STATE_RESET;
 8000e92:	4a46      	ldr	r2, [pc, #280]	; (8000fac <Queue_Process_LED+0x238>)
 8000e94:	7813      	ldrb	r3, [r2, #0]
 8000e96:	f36f 0382 	bfc	r3, #2, #1
 8000e9a:	7013      	strb	r3, [r2, #0]
 8000e9c:	e054      	b.n	8000f48 <Queue_Process_LED+0x1d4>
            }
            else if(!strcmp(token, "LedPWM")){
 8000e9e:	4947      	ldr	r1, [pc, #284]	; (8000fbc <Queue_Process_LED+0x248>)
 8000ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ea2:	f7ff f99d 	bl	80001e0 <strcmp>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d114      	bne.n	8000ed6 <Queue_Process_LED+0x162>
                flags_States.flag_LedBlink = FLAG_STATE_RESET;
 8000eac:	4a3f      	ldr	r2, [pc, #252]	; (8000fac <Queue_Process_LED+0x238>)
 8000eae:	7813      	ldrb	r3, [r2, #0]
 8000eb0:	f36f 0382 	bfc	r3, #2, #1
 8000eb4:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedOn = FLAG_STATE_RESET;
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <Queue_Process_LED+0x238>)
 8000eb8:	7813      	ldrb	r3, [r2, #0]
 8000eba:	f36f 0300 	bfc	r3, #0, #1
 8000ebe:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedOff = FLAG_STATE_RESET;
 8000ec0:	4a3a      	ldr	r2, [pc, #232]	; (8000fac <Queue_Process_LED+0x238>)
 8000ec2:	7813      	ldrb	r3, [r2, #0]
 8000ec4:	f36f 0341 	bfc	r3, #1, #1
 8000ec8:	7013      	strb	r3, [r2, #0]
      		    flags_States.flag_LedPWM = FLAG_STATE_SET;
 8000eca:	4a38      	ldr	r2, [pc, #224]	; (8000fac <Queue_Process_LED+0x238>)
 8000ecc:	7813      	ldrb	r3, [r2, #0]
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	7013      	strb	r3, [r2, #0]
 8000ed4:	e038      	b.n	8000f48 <Queue_Process_LED+0x1d4>
            }
            else if(!strcmp(token, "ResetAll")){
 8000ed6:	493a      	ldr	r1, [pc, #232]	; (8000fc0 <Queue_Process_LED+0x24c>)
 8000ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eda:	f7ff f981 	bl	80001e0 <strcmp>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d131      	bne.n	8000f48 <Queue_Process_LED+0x1d4>
      		  flags_States.flag_LedBlink = FLAG_STATE_RESET;
 8000ee4:	4a31      	ldr	r2, [pc, #196]	; (8000fac <Queue_Process_LED+0x238>)
 8000ee6:	7813      	ldrb	r3, [r2, #0]
 8000ee8:	f36f 0382 	bfc	r3, #2, #1
 8000eec:	7013      	strb	r3, [r2, #0]
      		  flags_States.flag_LedOn = FLAG_STATE_RESET;
 8000eee:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <Queue_Process_LED+0x238>)
 8000ef0:	7813      	ldrb	r3, [r2, #0]
 8000ef2:	f36f 0300 	bfc	r3, #0, #1
 8000ef6:	7013      	strb	r3, [r2, #0]
      		  flags_States.flag_LedOff = FLAG_STATE_RESET;
 8000ef8:	4a2c      	ldr	r2, [pc, #176]	; (8000fac <Queue_Process_LED+0x238>)
 8000efa:	7813      	ldrb	r3, [r2, #0]
 8000efc:	f36f 0341 	bfc	r3, #1, #1
 8000f00:	7013      	strb	r3, [r2, #0]
      		  flags_States.flag_LedPWM = FLAG_STATE_RESET;
 8000f02:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <Queue_Process_LED+0x238>)
 8000f04:	7813      	ldrb	r3, [r2, #0]
 8000f06:	f36f 03c3 	bfc	r3, #3, #1
 8000f0a:	7013      	strb	r3, [r2, #0]
      		  flags_States.flag_UART_LedBlink = FLAG_STATE_RESET;
 8000f0c:	4a27      	ldr	r2, [pc, #156]	; (8000fac <Queue_Process_LED+0x238>)
 8000f0e:	7813      	ldrb	r3, [r2, #0]
 8000f10:	f36f 13c7 	bfc	r3, #7, #1
 8000f14:	7013      	strb	r3, [r2, #0]
      		  flags_States.flag_UART_LedOn = FLAG_STATE_RESET;
 8000f16:	4a25      	ldr	r2, [pc, #148]	; (8000fac <Queue_Process_LED+0x238>)
 8000f18:	7813      	ldrb	r3, [r2, #0]
 8000f1a:	f36f 1345 	bfc	r3, #5, #1
 8000f1e:	7013      	strb	r3, [r2, #0]
      		  flags_States.flag_UART_LedOff = FLAG_STATE_RESET;
 8000f20:	4a22      	ldr	r2, [pc, #136]	; (8000fac <Queue_Process_LED+0x238>)
 8000f22:	7813      	ldrb	r3, [r2, #0]
 8000f24:	f36f 1386 	bfc	r3, #6, #1
 8000f28:	7013      	strb	r3, [r2, #0]
      		  flags_States.flag_UART_LedPWM = FLAG_STATE_RESET;
 8000f2a:	4a20      	ldr	r2, [pc, #128]	; (8000fac <Queue_Process_LED+0x238>)
 8000f2c:	7853      	ldrb	r3, [r2, #1]
 8000f2e:	f36f 0300 	bfc	r3, #0, #1
 8000f32:	7053      	strb	r3, [r2, #1]
      		  flags_States.flag_Parameter = FLAG_STATE_RESET;
 8000f34:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <Queue_Process_LED+0x238>)
 8000f36:	7853      	ldrb	r3, [r2, #1]
 8000f38:	f36f 0341 	bfc	r3, #1, #1
 8000f3c:	7053      	strb	r3, [r2, #1]
      		  flags_States.flag_UARTCallBack = FLAG_STATE_RESET;
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <Queue_Process_LED+0x238>)
 8000f40:	7813      	ldrb	r3, [r2, #0]
 8000f42:	f36f 1304 	bfc	r3, #4, #1
 8000f46:	7013      	strb	r3, [r2, #0]
             }


            token = strtok(NULL, " ");
 8000f48:	4917      	ldr	r1, [pc, #92]	; (8000fa8 <Queue_Process_LED+0x234>)
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f003 fd1a 	bl	8004984 <strtok>
 8000f50:	6278      	str	r0, [r7, #36]	; 0x24
            if(token != NULL){
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00c      	beq.n	8000f72 <Queue_Process_LED+0x1fe>
                rxParameter = atoi(token); // string i int yapma !!!
 8000f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f5a:	f003 fa8b 	bl	8004474 <atoi>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <Queue_Process_LED+0x250>)
 8000f64:	601a      	str	r2, [r3, #0]
                flags_States.flag_Parameter = FLAG_STATE_SET; // parametre set etme
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <Queue_Process_LED+0x238>)
 8000f68:	7853      	ldrb	r3, [r2, #1]
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	7053      	strb	r3, [r2, #1]
 8000f70:	e004      	b.n	8000f7c <Queue_Process_LED+0x208>
            }else{
                flags_States.flag_Parameter = FLAG_STATE_RESET; // parametre gelmezse reset kalsın çalışmasın.
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <Queue_Process_LED+0x238>)
 8000f74:	7853      	ldrb	r3, [r2, #1]
 8000f76:	f36f 0341 	bfc	r3, #1, #1
 8000f7a:	7053      	strb	r3, [r2, #1]
            }

            queue->queue[i].flag = QUEUE_STATE_EMPTY; // queue yi boşalt
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6819      	ldr	r1, [r3, #0]
 8000f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
    for (int i = 0; i < QUEUE_SIZE; i++) {
 8000f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f92:	3301      	adds	r3, #1
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	f77f aef2 	ble.w	8000d82 <Queue_Process_LED+0xe>
        }
    }
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	; 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	080059d0 	.word	0x080059d0
 8000fac:	20000110 	.word	0x20000110
 8000fb0:	080059d4 	.word	0x080059d4
 8000fb4:	080059dc 	.word	0x080059dc
 8000fb8:	080059e4 	.word	0x080059e4
 8000fbc:	080059ec 	.word	0x080059ec
 8000fc0:	080059f4 	.word	0x080059f4
 8000fc4:	20000130 	.word	0x20000130

08000fc8 <CheckFunctions>:
}*/

/**
  * @brief This function initialize Circular Buffer struct.
  */
void CheckFunctions(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	if(flags_States.flag_LedOn == FLAG_STATE_RESET && \
 8000fce:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <CheckFunctions+0x12c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d128      	bne.n	800102e <CheckFunctions+0x66>
				  flags_States.flag_LedOff == FLAG_STATE_RESET && \
 8000fdc:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <CheckFunctions+0x12c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	b2db      	uxtb	r3, r3
	if(flags_States.flag_LedOn == FLAG_STATE_RESET && \
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d121      	bne.n	800102e <CheckFunctions+0x66>
				  flags_States.flag_LedBlink == FLAG_STATE_RESET && \
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <CheckFunctions+0x12c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	b2db      	uxtb	r3, r3
				  flags_States.flag_LedOff == FLAG_STATE_RESET && \
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d11a      	bne.n	800102e <CheckFunctions+0x66>
				  flags_States.flag_LedPWM == FLAG_STATE_RESET){
 8000ff8:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <CheckFunctions+0x12c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	b2db      	uxtb	r3, r3
				  flags_States.flag_LedBlink == FLAG_STATE_RESET && \
 8001002:	2b00      	cmp	r3, #0
 8001004:	d113      	bne.n	800102e <CheckFunctions+0x66>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,TIM_MAX_VALUE);
 8001006:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <CheckFunctions+0x130>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
		//HAL_UART_Transmit(&huart2,ledOn,sizeof(ledOn),HAL_MAX_DELAY);
		HAL_Delay(delayMs);
 8001010:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <CheckFunctions+0x134>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fb9d 	bl	8001754 <HAL_Delay>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,TIM_MIN_VALUE);
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <CheckFunctions+0x130>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2200      	movs	r2, #0
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
		//HAL_UART_Transmit(&huart2,ledOff,sizeof(ledOff),HAL_MAX_DELAY);
		HAL_Delay(delayMs);
 8001022:	4b36      	ldr	r3, [pc, #216]	; (80010fc <CheckFunctions+0x134>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fb94 	bl	8001754 <HAL_Delay>
		for(int i = rxParameter ; i > TIM_MIN_VALUE ; i--){
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
			HAL_Delay(1);
		}
	}
}
 800102c:	e05d      	b.n	80010ea <CheckFunctions+0x122>
	else if(flags_States.flag_LedOn == FLAG_STATE_SET){
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <CheckFunctions+0x12c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <CheckFunctions+0x80>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,TIM_MAX_VALUE);
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <CheckFunctions+0x130>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001046:	e050      	b.n	80010ea <CheckFunctions+0x122>
	else if(flags_States.flag_LedOff == FLAG_STATE_SET){
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <CheckFunctions+0x12c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <CheckFunctions+0x98>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,TIM_MIN_VALUE);
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <CheckFunctions+0x130>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800105e:	e044      	b.n	80010ea <CheckFunctions+0x122>
	else if(flags_States.flag_LedBlink == FLAG_STATE_SET){
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <CheckFunctions+0x12c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d013      	beq.n	8001096 <CheckFunctions+0xce>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,TIM_MAX_VALUE);
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <CheckFunctions+0x130>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(rxParameter);
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <CheckFunctions+0x138>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb69 	bl	8001754 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,TIM_MIN_VALUE);
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <CheckFunctions+0x130>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(rxParameter);
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <CheckFunctions+0x138>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fb60 	bl	8001754 <HAL_Delay>
}
 8001094:	e029      	b.n	80010ea <CheckFunctions+0x122>
	else if(flags_States.flag_LedPWM == FLAG_STATE_SET){
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <CheckFunctions+0x12c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d022      	beq.n	80010ea <CheckFunctions+0x122>
		for(int i = TIM_MIN_VALUE ; i < rxParameter ; i++){
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	e009      	b.n	80010be <CheckFunctions+0xf6>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <CheckFunctions+0x130>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 fb4e 	bl	8001754 <HAL_Delay>
		for(int i = TIM_MIN_VALUE ; i < rxParameter ; i++){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3301      	adds	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <CheckFunctions+0x138>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3f0      	bcc.n	80010aa <CheckFunctions+0xe2>
		for(int i = rxParameter ; i > TIM_MIN_VALUE ; i--){
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <CheckFunctions+0x138>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	e009      	b.n	80010e4 <CheckFunctions+0x11c>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <CheckFunctions+0x130>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 fb3b 	bl	8001754 <HAL_Delay>
		for(int i = rxParameter ; i > TIM_MIN_VALUE ; i--){
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dcf2      	bgt.n	80010d0 <CheckFunctions+0x108>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000110 	.word	0x20000110
 80010f8:	20000084 	.word	0x20000084
 80010fc:	2000012c 	.word	0x2000012c
 8001100:	20000130 	.word	0x20000130

08001104 <Queue_Init>:
/******************************************************************************/

/**
  * @brief This function initialize Circular Buffer struct.
  */
void Queue_Init(QUEUE_InitTypeDef *queue, uint8_t size){
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
	queue->size = size;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	78fa      	ldrb	r2, [r7, #3]
 8001114:	711a      	strb	r2, [r3, #4]
	queue->indexData = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	719a      	strb	r2, [r3, #6]
	queue->indexQueue = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	715a      	strb	r2, [r3, #5]
	queue->queue = (DATA_InitTypeDef*)calloc(queue->size,sizeof(DATA_InitTypeDef));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	2118      	movs	r1, #24
 8001128:	4618      	mov	r0, r3
 800112a:	f003 f9a7 	bl	800447c <calloc>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < queue->size; i++) {
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	e00c      	b.n	8001156 <Queue_Init+0x52>
		queue->queue[i].flag = QUEUE_STATE_EMPTY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
	for (int i = 0; i < queue->size; i++) {
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4293      	cmp	r3, r2
 8001160:	dbec      	blt.n	800113c <Queue_Init+0x38>
	}
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Queue_Check>:

/**
  * @brief This function initialize Circular Buffer struct.
  */
void Queue_Check(QUEUE_InitTypeDef *queue){
 800116c:	b580      	push	{r7, lr}
 800116e:	b0a2      	sub	sp, #136	; 0x88
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	char string[100];
	for (int i = 0; i < QUEUE_SIZE; i++) {
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800117a:	e05c      	b.n	8001236 <Queue_Check+0xca>
		if(queue->queue[i].flag == QUEUE_STATE_FULL){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d14b      	bne.n	800122c <Queue_Check+0xc0>
			//Adress Print
			sprintf(string, "Queue[%d] Address: %p\n",i,&(queue->queue[i]));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	f107 0020 	add.w	r0, r7, #32
 80011aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80011ae:	4926      	ldr	r1, [pc, #152]	; (8001248 <Queue_Check+0xdc>)
 80011b0:	f003 fb6a 	bl	8004888 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f81b 	bl	80001f4 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	f107 0120 	add.w	r1, r7, #32
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	4820      	ldr	r0, [pc, #128]	; (800124c <Queue_Check+0xe0>)
 80011cc:	f002 f927 	bl	800341e <HAL_UART_Transmit>
			HAL_Delay(DELAY_MS);
 80011d0:	2019      	movs	r0, #25
 80011d2:	f000 fabf 	bl	8001754 <HAL_Delay>


			// Data
			char dataStr[21]; // Null için 1 ekledim
			strncpy(dataStr, (char*)queue->queue[i].datas, 20); // que size i 20 oldugundan
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6819      	ldr	r1, [r3, #0]
 80011da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	4619      	mov	r1, r3
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	2214      	movs	r2, #20
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fbb4 	bl	800495e <strncpy>
			dataStr[20] = '\0';
 80011f6:	2300      	movs	r3, #0
 80011f8:	773b      	strb	r3, [r7, #28]

			sprintf(string, "Data: %s\n", dataStr);
 80011fa:	f107 0208 	add.w	r2, r7, #8
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	4913      	ldr	r1, [pc, #76]	; (8001250 <Queue_Check+0xe4>)
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fb3f 	bl	8004888 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f7fe fff0 	bl	80001f4 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	f107 0120 	add.w	r1, r7, #32
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	480a      	ldr	r0, [pc, #40]	; (800124c <Queue_Check+0xe0>)
 8001222:	f002 f8fc 	bl	800341e <HAL_UART_Transmit>
			HAL_Delay(DELAY_MS);
 8001226:	2019      	movs	r0, #25
 8001228:	f000 fa94 	bl	8001754 <HAL_Delay>
	for (int i = 0; i < QUEUE_SIZE; i++) {
 800122c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001230:	3301      	adds	r3, #1
 8001232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800123a:	2b0f      	cmp	r3, #15
 800123c:	dd9e      	ble.n	800117c <Queue_Check+0x10>
		}
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3788      	adds	r7, #136	; 0x88
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08005a00 	.word	0x08005a00
 800124c:	200000cc 	.word	0x200000cc
 8001250:	08005a18 	.word	0x08005a18

08001254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b4:	d10d      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_TIM_Base_MspInit+0x3c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_TIM_Base_MspInit+0x3c>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_TIM_Base_MspInit+0x3c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001304:	d11d      	bne.n	8001342 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_TIM_MspPostInit+0x68>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_TIM_MspPostInit+0x68>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_TIM_MspPostInit+0x68>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001322:	2320      	movs	r3, #32
 8001324:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001332:	2301      	movs	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <HAL_TIM_MspPostInit+0x6c>)
 800133e:	f000 fbd1 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_UART_MspInit+0x94>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d133      	bne.n	80013de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_UART_MspInit+0x98>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_UART_MspInit+0x98>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_UART_MspInit+0x98>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ae:	230c      	movs	r3, #12
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013be:	2307      	movs	r3, #7
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <HAL_UART_MspInit+0x9c>)
 80013ca:	f000 fb8b 	bl	8001ae4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2026      	movs	r0, #38	; 0x26
 80013d4:	f000 fabd 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d8:	2026      	movs	r0, #38	; 0x26
 80013da:	f000 fad6 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40004400 	.word	0x40004400
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f968 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <USART2_IRQHandler+0x10>)
 800144e:	f002 f8a9 	bl	80035a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200000cc 	.word	0x200000cc

0800145c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001460:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001464:	f000 fcc2 	bl	8001dec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_kill>:

int _kill(int pid, int sig)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001486:	f003 fb2f 	bl	8004ae8 <__errno>
 800148a:	4603      	mov	r3, r0
 800148c:	2216      	movs	r2, #22
 800148e:	601a      	str	r2, [r3, #0]
  return -1;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_exit>:

void _exit (int status)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffe7 	bl	800147c <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ae:	e7fe      	b.n	80014ae <_exit+0x12>

080014b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e00a      	b.n	80014d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c2:	f3af 8000 	nop.w
 80014c6:	4601      	mov	r1, r0
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	60ba      	str	r2, [r7, #8]
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf0      	blt.n	80014c2 <_read+0x12>
  }

  return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e009      	b.n	8001510 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf1      	blt.n	80014fc <_write+0x12>
  }
  return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_close>:

int _close(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154a:	605a      	str	r2, [r3, #4]
  return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f003 fa94 	bl	8004ae8 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20018000 	.word	0x20018000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	20000134 	.word	0x20000134
 80015f4:	20000288 	.word	0x20000288

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001622:	490e      	ldr	r1, [pc, #56]	; (800165c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001638:	4c0b      	ldr	r4, [pc, #44]	; (8001668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001646:	f7ff ffd7 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f003 fa53 	bl	8004af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7ff f937 	bl	80008c0 <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001654:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001660:	08005c6c 	.word	0x08005c6c
  ldr r2, =_sbss
 8001664:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001668:	20000288 	.word	0x20000288

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_Init+0x40>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_Init+0x40>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x40>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f94f 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	200f      	movs	r0, #15
 80016a0:	f000 f808 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fdd6 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f967 	bl	80019a6 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f92f 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000000 	.word	0x20000000
 800170c:	20000008 	.word	0x20000008
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008
 8001738:	20000138 	.word	0x20000138

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000138 	.word	0x20000138

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff29 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff3e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff31 	bl	8001800 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff feb6 	bl	800173c <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d008      	beq.n	80019f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e052      	b.n	8001a96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0216 	bic.w	r2, r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <HAL_DMA_Abort+0x62>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0208 	bic.w	r2, r2, #8
 8001a2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a40:	e013      	b.n	8001a6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a42:	f7ff fe7b 	bl	800173c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d90c      	bls.n	8001a6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2203      	movs	r2, #3
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e015      	b.n	8001a96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e4      	bne.n	8001a42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	223f      	movs	r2, #63	; 0x3f
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d004      	beq.n	8001abc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e00c      	b.n	8001ad6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2205      	movs	r2, #5
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e159      	b.n	8001db4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8148 	bne.w	8001dae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d005      	beq.n	8001b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d130      	bne.n	8001b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 0201 	and.w	r2, r3, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d017      	beq.n	8001bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d123      	bne.n	8001c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a2 	beq.w	8001dae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b57      	ldr	r3, [pc, #348]	; (8001dcc <HAL_GPIO_Init+0x2e8>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a56      	ldr	r2, [pc, #344]	; (8001dcc <HAL_GPIO_Init+0x2e8>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b54      	ldr	r3, [pc, #336]	; (8001dcc <HAL_GPIO_Init+0x2e8>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c86:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_GPIO_Init+0x2ec>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a49      	ldr	r2, [pc, #292]	; (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d019      	beq.n	8001ce6 <HAL_GPIO_Init+0x202>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a48      	ldr	r2, [pc, #288]	; (8001dd8 <HAL_GPIO_Init+0x2f4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x1fe>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a47      	ldr	r2, [pc, #284]	; (8001ddc <HAL_GPIO_Init+0x2f8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x1fa>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a46      	ldr	r2, [pc, #280]	; (8001de0 <HAL_GPIO_Init+0x2fc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x1f6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a45      	ldr	r2, [pc, #276]	; (8001de4 <HAL_GPIO_Init+0x300>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x1f2>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf8:	4935      	ldr	r1, [pc, #212]	; (8001dd0 <HAL_GPIO_Init+0x2ec>)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d06:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2a:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da8:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b0f      	cmp	r3, #15
 8001db8:	f67f aea2 	bls.w	8001b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40013800 	.word	0x40013800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40013c00 	.word	0x40013c00

08001dec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff0a 	bl	8000c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40013c00 	.word	0x40013c00

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e267      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d075      	beq.n	8001f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3a:	4b88      	ldr	r3, [pc, #544]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d00c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d112      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e52:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e5e:	d10b      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	4b7e      	ldr	r3, [pc, #504]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d05b      	beq.n	8001f24 <HAL_RCC_OscConfig+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d157      	bne.n	8001f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e242      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d106      	bne.n	8001e90 <HAL_RCC_OscConfig+0x74>
 8001e82:	4b76      	ldr	r3, [pc, #472]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a75      	ldr	r2, [pc, #468]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x98>
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6f      	ldr	r2, [pc, #444]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6c      	ldr	r2, [pc, #432]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001eb4:	4b69      	ldr	r3, [pc, #420]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a68      	ldr	r2, [pc, #416]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fc32 	bl	800173c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fc2e 	bl	800173c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e207      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xc0>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fc1e 	bl	800173c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fc1a 	bl	800173c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1f3      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b51      	ldr	r3, [pc, #324]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0xe8>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f32:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b44      	ldr	r3, [pc, #272]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x152>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1c7      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4937      	ldr	r1, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_OscConfig+0x244>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7ff fbd3 	bl	800173c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fbcf 	bl	800173c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1a8      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4925      	ldr	r1, [pc, #148]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x244>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fbb2 	bl	800173c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff fbae 	bl	800173c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e187      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d036      	beq.n	8002074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d016      	beq.n	800203c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_RCC_OscConfig+0x248>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7ff fb92 	bl	800173c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff fb8e 	bl	800173c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e167      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x200>
 800203a:	e01b      	b.n	8002074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_OscConfig+0x248>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7ff fb7b 	bl	800173c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	e00e      	b.n	8002068 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204a:	f7ff fb77 	bl	800173c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d907      	bls.n	8002068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e150      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
 800205c:	40023800 	.word	0x40023800
 8002060:	42470000 	.word	0x42470000
 8002064:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ea      	bne.n	800204a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8097 	beq.w	80021b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10f      	bne.n	80020b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b7d      	ldr	r3, [pc, #500]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a7c      	ldr	r2, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b7a      	ldr	r3, [pc, #488]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b77      	ldr	r3, [pc, #476]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d118      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020be:	4b74      	ldr	r3, [pc, #464]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a73      	ldr	r2, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fb37 	bl	800173c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7ff fb33 	bl	800173c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e10c      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x2ea>
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a63      	ldr	r2, [pc, #396]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	e01c      	b.n	8002140 <HAL_RCC_OscConfig+0x324>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b05      	cmp	r3, #5
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x30c>
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a5e      	ldr	r2, [pc, #376]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a5b      	ldr	r2, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0x324>
 8002128:	4b58      	ldr	r3, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a54      	ldr	r2, [pc, #336]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800213a:	f023 0304 	bic.w	r3, r3, #4
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d015      	beq.n	8002174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7ff faf8 	bl	800173c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7ff faf4 	bl	800173c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0cb      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ee      	beq.n	8002150 <HAL_RCC_OscConfig+0x334>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7ff fae2 	bl	800173c <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7ff fade 	bl	800173c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e0b5      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1ee      	bne.n	800217c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4a38      	ldr	r2, [pc, #224]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a1 	beq.w	80022fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d05c      	beq.n	8002280 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d141      	bne.n	8002252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fab2 	bl	800173c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff faae 	bl	800173c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e087      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	3b01      	subs	r3, #1
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	491b      	ldr	r1, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff fa87 	bl	800173c <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002232:	f7ff fa83 	bl	800173c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e05c      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x416>
 8002250:	e054      	b.n	80022fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fa70 	bl	800173c <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff fa6c 	bl	800173c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e045      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x444>
 800227e:	e03d      	b.n	80022fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e038      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000
 8002294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x4ec>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d028      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d121      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d11a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d111      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	3b01      	subs	r3, #1
 80022e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0cc      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d90c      	bls.n	8002348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800236a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d044      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d119      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e067      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4934      	ldr	r1, [pc, #208]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7ff f99e 	bl	800173c <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7ff f99a 	bl	800173c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d20c      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f821 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	490a      	ldr	r1, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f8fe 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08005a60 	.word	0x08005a60
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024dc:	b094      	sub	sp, #80	; 0x50
 80024de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	647b      	str	r3, [r7, #68]	; 0x44
 80024e4:	2300      	movs	r3, #0
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e8:	2300      	movs	r3, #0
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f0:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d00d      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x40>
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	f200 80e1 	bhi.w	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x34>
 8002506:	2b04      	cmp	r3, #4
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x3a>
 800250a:	e0db      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b73      	ldr	r3, [pc, #460]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002510:	e0db      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002516:	e0d8      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002522:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	2200      	movs	r2, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
 8002538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
 8002546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4621      	mov	r1, r4
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	6139      	str	r1, [r7, #16]
 8002568:	4629      	mov	r1, r5
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800257c:	4659      	mov	r1, fp
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4651      	mov	r1, sl
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4651      	mov	r1, sl
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4651      	mov	r1, sl
 800258c:	ebb2 0801 	subs.w	r8, r2, r1
 8002590:	4659      	mov	r1, fp
 8002592:	eb63 0901 	sbc.w	r9, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025aa:	4690      	mov	r8, r2
 80025ac:	4699      	mov	r9, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	eb18 0303 	adds.w	r3, r8, r3
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	462b      	mov	r3, r5
 80025b8:	eb49 0303 	adc.w	r3, r9, r3
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ca:	4629      	mov	r1, r5
 80025cc:	024b      	lsls	r3, r1, #9
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025d4:	4621      	mov	r1, r4
 80025d6:	024a      	lsls	r2, r1, #9
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025de:	2200      	movs	r2, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e8:	f7fd fe62 	bl	80002b0 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f4:	e058      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	4611      	mov	r1, r2
 8002602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	f04f 0000 	mov.w	r0, #0
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	0159      	lsls	r1, r3, #5
 800261e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002622:	0150      	lsls	r0, r2, #5
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4641      	mov	r1, r8
 800262a:	ebb2 0a01 	subs.w	sl, r2, r1
 800262e:	4649      	mov	r1, r9
 8002630:	eb63 0b01 	sbc.w	fp, r3, r1
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002648:	ebb2 040a 	subs.w	r4, r2, sl
 800264c:	eb63 050b 	sbc.w	r5, r3, fp
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	00eb      	lsls	r3, r5, #3
 800265a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4643      	mov	r3, r8
 8002666:	18e3      	adds	r3, r4, r3
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	464b      	mov	r3, r9
 800266c:	eb45 0303 	adc.w	r3, r5, r3
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267e:	4629      	mov	r1, r5
 8002680:	028b      	lsls	r3, r1, #10
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002688:	4621      	mov	r1, r4
 800268a:	028a      	lsls	r2, r1, #10
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002692:	2200      	movs	r2, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	61fa      	str	r2, [r7, #28]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	f7fd fe08 	bl	80002b0 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4613      	mov	r3, r2
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3750      	adds	r7, #80	; 0x50
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	007a1200 	.word	0x007a1200

080026e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002700:	f7ff fff0 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	08005a70 	.word	0x08005a70

08002724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002728:	f7ff ffdc 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0b5b      	lsrs	r3, r3, #13
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	08005a70 	.word	0x08005a70

0800274c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e041      	b.n	80027e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fd96 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	4619      	mov	r1, r3
 800278a:	4610      	mov	r0, r2
 800278c:	f000 fac0 	bl	8002d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e041      	b.n	8002880 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f839 	bl	8002888 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f000 fa71 	bl	8002d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_TIM_PWM_Start+0x24>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e022      	b.n	8002906 <HAL_TIM_PWM_Start+0x6a>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d109      	bne.n	80028da <HAL_TIM_PWM_Start+0x3e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	e015      	b.n	8002906 <HAL_TIM_PWM_Start+0x6a>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d109      	bne.n	80028f4 <HAL_TIM_PWM_Start+0x58>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e008      	b.n	8002906 <HAL_TIM_PWM_Start+0x6a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e068      	b.n	80029e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <HAL_TIM_PWM_Start+0x82>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291c:	e013      	b.n	8002946 <HAL_TIM_PWM_Start+0xaa>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b04      	cmp	r3, #4
 8002922:	d104      	bne.n	800292e <HAL_TIM_PWM_Start+0x92>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800292c:	e00b      	b.n	8002946 <HAL_TIM_PWM_Start+0xaa>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d104      	bne.n	800293e <HAL_TIM_PWM_Start+0xa2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800293c:	e003      	b.n	8002946 <HAL_TIM_PWM_Start+0xaa>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2201      	movs	r2, #1
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fc84 	bl	800325c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_TIM_PWM_Start+0x14c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d107      	bne.n	800296e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <HAL_TIM_PWM_Start+0x14c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d018      	beq.n	80029aa <HAL_TIM_PWM_Start+0x10e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d013      	beq.n	80029aa <HAL_TIM_PWM_Start+0x10e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_TIM_PWM_Start+0x150>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00e      	beq.n	80029aa <HAL_TIM_PWM_Start+0x10e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <HAL_TIM_PWM_Start+0x154>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_TIM_PWM_Start+0x10e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_TIM_PWM_Start+0x158>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_TIM_PWM_Start+0x10e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_TIM_PWM_Start+0x15c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d111      	bne.n	80029ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b06      	cmp	r3, #6
 80029ba:	d010      	beq.n	80029de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029cc:	e007      	b.n	80029de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40014000 	.word	0x40014000

080029fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e0ae      	b.n	8002b78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	f200 809f 	bhi.w	8002b68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002a65 	.word	0x08002a65
 8002a34:	08002b69 	.word	0x08002b69
 8002a38:	08002b69 	.word	0x08002b69
 8002a3c:	08002b69 	.word	0x08002b69
 8002a40:	08002aa5 	.word	0x08002aa5
 8002a44:	08002b69 	.word	0x08002b69
 8002a48:	08002b69 	.word	0x08002b69
 8002a4c:	08002b69 	.word	0x08002b69
 8002a50:	08002ae7 	.word	0x08002ae7
 8002a54:	08002b69 	.word	0x08002b69
 8002a58:	08002b69 	.word	0x08002b69
 8002a5c:	08002b69 	.word	0x08002b69
 8002a60:	08002b27 	.word	0x08002b27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f9d0 	bl	8002e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0208 	orr.w	r2, r2, #8
 8002a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6999      	ldr	r1, [r3, #24]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	619a      	str	r2, [r3, #24]
      break;
 8002aa2:	e064      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fa16 	bl	8002edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6999      	ldr	r1, [r3, #24]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	021a      	lsls	r2, r3, #8
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	619a      	str	r2, [r3, #24]
      break;
 8002ae4:	e043      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fa61 	bl	8002fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0208 	orr.w	r2, r2, #8
 8002b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0204 	bic.w	r2, r2, #4
 8002b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69d9      	ldr	r1, [r3, #28]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	61da      	str	r2, [r3, #28]
      break;
 8002b24:	e023      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 faab 	bl	8003088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69d9      	ldr	r1, [r3, #28]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	61da      	str	r2, [r3, #28]
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_TIM_ConfigClockSource+0x1c>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e0b4      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x186>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd4:	d03e      	beq.n	8002c54 <HAL_TIM_ConfigClockSource+0xd4>
 8002bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bda:	f200 8087 	bhi.w	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be2:	f000 8086 	beq.w	8002cf2 <HAL_TIM_ConfigClockSource+0x172>
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bea:	d87f      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b70      	cmp	r3, #112	; 0x70
 8002bee:	d01a      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0xa6>
 8002bf0:	2b70      	cmp	r3, #112	; 0x70
 8002bf2:	d87b      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b60      	cmp	r3, #96	; 0x60
 8002bf6:	d050      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x11a>
 8002bf8:	2b60      	cmp	r3, #96	; 0x60
 8002bfa:	d877      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b50      	cmp	r3, #80	; 0x50
 8002bfe:	d03c      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0xfa>
 8002c00:	2b50      	cmp	r3, #80	; 0x50
 8002c02:	d873      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d058      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x13a>
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d86f      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b30      	cmp	r3, #48	; 0x30
 8002c0e:	d064      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x15a>
 8002c10:	2b30      	cmp	r3, #48	; 0x30
 8002c12:	d86b      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d060      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d867      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05c      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d05a      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x15a>
 8002c24:	e062      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f000 faf1 	bl	800321c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	609a      	str	r2, [r3, #8]
      break;
 8002c52:	e04f      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f000 fada 	bl	800321c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c76:	609a      	str	r2, [r3, #8]
      break;
 8002c78:	e03c      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f000 fa4e 	bl	8003128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2150      	movs	r1, #80	; 0x50
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 faa7 	bl	80031e6 <TIM_ITRx_SetConfig>
      break;
 8002c98:	e02c      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f000 fa6d 	bl	8003186 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2160      	movs	r1, #96	; 0x60
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fa97 	bl	80031e6 <TIM_ITRx_SetConfig>
      break;
 8002cb8:	e01c      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6859      	ldr	r1, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f000 fa2e 	bl	8003128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2140      	movs	r1, #64	; 0x40
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fa87 	bl	80031e6 <TIM_ITRx_SetConfig>
      break;
 8002cd8:	e00c      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f000 fa7e 	bl	80031e6 <TIM_ITRx_SetConfig>
      break;
 8002cea:	e003      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf0:	e000      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a34      	ldr	r2, [pc, #208]	; (8002df4 <TIM_Base_SetConfig+0xe4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00f      	beq.n	8002d48 <TIM_Base_SetConfig+0x38>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2e:	d00b      	beq.n	8002d48 <TIM_Base_SetConfig+0x38>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a31      	ldr	r2, [pc, #196]	; (8002df8 <TIM_Base_SetConfig+0xe8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <TIM_Base_SetConfig+0x38>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a30      	ldr	r2, [pc, #192]	; (8002dfc <TIM_Base_SetConfig+0xec>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <TIM_Base_SetConfig+0x38>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a2f      	ldr	r2, [pc, #188]	; (8002e00 <TIM_Base_SetConfig+0xf0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d108      	bne.n	8002d5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a25      	ldr	r2, [pc, #148]	; (8002df4 <TIM_Base_SetConfig+0xe4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01b      	beq.n	8002d9a <TIM_Base_SetConfig+0x8a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d017      	beq.n	8002d9a <TIM_Base_SetConfig+0x8a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a22      	ldr	r2, [pc, #136]	; (8002df8 <TIM_Base_SetConfig+0xe8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <TIM_Base_SetConfig+0x8a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a21      	ldr	r2, [pc, #132]	; (8002dfc <TIM_Base_SetConfig+0xec>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00f      	beq.n	8002d9a <TIM_Base_SetConfig+0x8a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <TIM_Base_SetConfig+0xf0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00b      	beq.n	8002d9a <TIM_Base_SetConfig+0x8a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <TIM_Base_SetConfig+0xf4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <TIM_Base_SetConfig+0x8a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <TIM_Base_SetConfig+0xf8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_Base_SetConfig+0x8a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <TIM_Base_SetConfig+0xfc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <TIM_Base_SetConfig+0xe4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d103      	bne.n	8002de0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	615a      	str	r2, [r3, #20]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40000c00 	.word	0x40000c00
 8002e04:	40014000 	.word	0x40014000
 8002e08:	40014400 	.word	0x40014400
 8002e0c:	40014800 	.word	0x40014800

08002e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	f023 0201 	bic.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f023 0302 	bic.w	r3, r3, #2
 8002e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <TIM_OC1_SetConfig+0xc8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d10c      	bne.n	8002e86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f023 0308 	bic.w	r3, r3, #8
 8002e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <TIM_OC1_SetConfig+0xc8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	621a      	str	r2, [r3, #32]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40010000 	.word	0x40010000

08002edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f023 0210 	bic.w	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f023 0320 	bic.w	r3, r3, #32
 8002f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <TIM_OC2_SetConfig+0xd4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d10d      	bne.n	8002f58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <TIM_OC2_SetConfig+0xd4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d113      	bne.n	8002f88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40010000 	.word	0x40010000

08002fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <TIM_OC3_SetConfig+0xd0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10d      	bne.n	800302e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800302c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a14      	ldr	r2, [pc, #80]	; (8003084 <TIM_OC3_SetConfig+0xd0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d113      	bne.n	800305e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800303c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	621a      	str	r2, [r3, #32]
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40010000 	.word	0x40010000

08003088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	031b      	lsls	r3, r3, #12
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <TIM_OC4_SetConfig+0x9c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d109      	bne.n	80030fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	621a      	str	r2, [r3, #32]
}
 8003116:	bf00      	nop
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40010000 	.word	0x40010000

08003128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	f023 0201 	bic.w	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f023 030a 	bic.w	r3, r3, #10
 8003164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	621a      	str	r2, [r3, #32]
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0210 	bic.w	r2, r3, #16
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	031b      	lsls	r3, r3, #12
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	f043 0307 	orr.w	r3, r3, #7
 8003208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	021a      	lsls	r2, r3, #8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	431a      	orrs	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	2201      	movs	r2, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1a      	ldr	r2, [r3, #32]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	43db      	mvns	r3, r3
 800327e:	401a      	ands	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	431a      	orrs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032bc:	2302      	movs	r3, #2
 80032be:	e050      	b.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330c:	d013      	beq.n	8003336 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a16      	ldr	r2, [pc, #88]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a15      	ldr	r2, [pc, #84]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10c      	bne.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800333c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	4313      	orrs	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40000400 	.word	0x40000400
 8003378:	40000800 	.word	0x40000800
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40014000 	.word	0x40014000

08003384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e03f      	b.n	8003416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd ffd2 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2224      	movs	r2, #36	; 0x24
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fddf 	bl	8003f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b08a      	sub	sp, #40	; 0x28
 8003422:	af02      	add	r7, sp, #8
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b20      	cmp	r3, #32
 800343c:	d17c      	bne.n	8003538 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_UART_Transmit+0x2c>
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e075      	b.n	800353a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_UART_Transmit+0x3e>
 8003458:	2302      	movs	r3, #2
 800345a:	e06e      	b.n	800353a <HAL_UART_Transmit+0x11c>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2221      	movs	r2, #33	; 0x21
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003472:	f7fe f963 	bl	800173c <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d108      	bne.n	80034a0 <HAL_UART_Transmit+0x82>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e003      	b.n	80034a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034b0:	e02a      	b.n	8003508 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 fb1f 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e036      	b.n	800353a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	3302      	adds	r3, #2
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	e007      	b.n	80034fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3301      	adds	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1cf      	bne.n	80034b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2140      	movs	r1, #64	; 0x40
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 faef 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e006      	b.n	800353a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	4613      	mov	r3, r2
 800354e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b20      	cmp	r3, #32
 800355a:	d11d      	bne.n	8003598 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_UART_Receive_IT+0x26>
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e016      	b.n	800359a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_UART_Receive_IT+0x38>
 8003576:	2302      	movs	r3, #2
 8003578:	e00f      	b.n	800359a <HAL_UART_Receive_IT+0x58>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	461a      	mov	r2, r3
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fb24 	bl	8003bdc <UART_Start_Receive_IT>
 8003594:	4603      	mov	r3, r0
 8003596:	e000      	b.n	800359a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b0ba      	sub	sp, #232	; 0xe8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_UART_IRQHandler+0x66>
 80035f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fc07 	bl	8003e16 <UART_Receive_IT>
      return;
 8003608:	e256      	b.n	8003ab8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800360a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80de 	beq.w	80037d0 <HAL_UART_IRQHandler+0x22c>
 8003614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003624:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80d1 	beq.w	80037d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <HAL_UART_IRQHandler+0xae>
 800363a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_UART_IRQHandler+0xd2>
 800365e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f043 0202 	orr.w	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_UART_IRQHandler+0xf6>
 8003682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f043 0204 	orr.w	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d011      	beq.n	80036ca <HAL_UART_IRQHandler+0x126>
 80036a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f043 0208 	orr.w	r2, r3, #8
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 81ed 	beq.w	8003aae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_UART_IRQHandler+0x14e>
 80036e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fb92 	bl	8003e16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_UART_IRQHandler+0x17a>
 8003716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d04f      	beq.n	80037be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa9a 	bl	8003c58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d141      	bne.n	80037b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3314      	adds	r3, #20
 8003738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800374c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3314      	adds	r3, #20
 800375a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800375e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800376a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1d9      	bne.n	8003732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d013      	beq.n	80037ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	4a7d      	ldr	r2, [pc, #500]	; (8003980 <HAL_UART_IRQHandler+0x3dc>)
 800378c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe f983 	bl	8001a9e <HAL_DMA_Abort_IT>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a8:	4610      	mov	r0, r2
 80037aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e00e      	b.n	80037cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f990 	bl	8003ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e00a      	b.n	80037cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f98c 	bl	8003ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	e006      	b.n	80037cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f988 	bl	8003ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037ca:	e170      	b.n	8003aae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	bf00      	nop
    return;
 80037ce:	e16e      	b.n	8003aae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	f040 814a 	bne.w	8003a6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8143 	beq.w	8003a6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 813c 	beq.w	8003a6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	f040 80b4 	bne.w	8003984 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8140 	beq.w	8003ab2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800383a:	429a      	cmp	r2, r3
 800383c:	f080 8139 	bcs.w	8003ab2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003846:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003852:	f000 8088 	beq.w	8003966 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800386c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800388e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800389a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1d9      	bne.n	8003856 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3314      	adds	r3, #20
 80038c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e1      	bne.n	80038a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3314      	adds	r3, #20
 80038fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e3      	bne.n	80038de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003936:	f023 0310 	bic.w	r3, r3, #16
 800393a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003948:	65ba      	str	r2, [r7, #88]	; 0x58
 800394a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800394e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e3      	bne.n	8003924 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe f82c 	bl	80019be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800396e:	b29b      	uxth	r3, r3
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8b6 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800397c:	e099      	b.n	8003ab2 <HAL_UART_IRQHandler+0x50e>
 800397e:	bf00      	nop
 8003980:	08003d1f 	.word	0x08003d1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800398c:	b29b      	uxth	r3, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 808b 	beq.w	8003ab6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80039a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8086 	beq.w	8003ab6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039ce:	647a      	str	r2, [r7, #68]	; 0x44
 80039d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e3      	bne.n	80039aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3314      	adds	r3, #20
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	623b      	str	r3, [r7, #32]
   return(result);
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3314      	adds	r3, #20
 8003a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a06:	633a      	str	r2, [r7, #48]	; 0x30
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e3      	bne.n	80039e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0310 	bic.w	r3, r3, #16
 8003a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a4c:	61fa      	str	r2, [r7, #28]
 8003a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	69b9      	ldr	r1, [r7, #24]
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	617b      	str	r3, [r7, #20]
   return(result);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e3      	bne.n	8003a28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f83e 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a6c:	e023      	b.n	8003ab6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_UART_IRQHandler+0x4ea>
 8003a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f95d 	bl	8003d46 <UART_Transmit_IT>
    return;
 8003a8c:	e014      	b.n	8003ab8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00e      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x514>
 8003a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f99d 	bl	8003de6 <UART_EndTransmit_IT>
    return;
 8003aac:	e004      	b.n	8003ab8 <HAL_UART_IRQHandler+0x514>
    return;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ab6:	bf00      	nop
  }
}
 8003ab8:	37e8      	adds	r7, #232	; 0xe8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop

08003ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b090      	sub	sp, #64	; 0x40
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b10:	e050      	b.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d04c      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b20:	f7fd fe0c 	bl	800173c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d241      	bcs.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b50:	637a      	str	r2, [r7, #52]	; 0x34
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e5      	bne.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	613b      	str	r3, [r7, #16]
   return(result);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b84:	623a      	str	r2, [r7, #32]
 8003b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69f9      	ldr	r1, [r7, #28]
 8003b8a:	6a3a      	ldr	r2, [r7, #32]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e00f      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d09f      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3740      	adds	r7, #64	; 0x40
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	88fa      	ldrh	r2, [r7, #6]
 8003bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2222      	movs	r2, #34	; 0x22
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0220 	orr.w	r2, r2, #32
 8003c48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b095      	sub	sp, #84	; 0x54
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	330c      	adds	r3, #12
 8003c7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c80:	643a      	str	r2, [r7, #64]	; 0x40
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e5      	bne.n	8003c60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d119      	bne.n	8003d04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f023 0310 	bic.w	r3, r3, #16
 8003ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf0:	61ba      	str	r2, [r7, #24]
 8003cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6979      	ldr	r1, [r7, #20]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d12:	bf00      	nop
 8003d14:	3754      	adds	r7, #84	; 0x54
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f7ff fecb 	bl	8003ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b21      	cmp	r3, #33	; 0x21
 8003d58:	d13e      	bne.n	8003dd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	d114      	bne.n	8003d8e <UART_Transmit_IT+0x48>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d110      	bne.n	8003d8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	1c9a      	adds	r2, r3, #2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	621a      	str	r2, [r3, #32]
 8003d8c:	e008      	b.n	8003da0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	1c59      	adds	r1, r3, #1
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6211      	str	r1, [r2, #32]
 8003d98:	781a      	ldrb	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4619      	mov	r1, r3
 8003dae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10f      	bne.n	8003dd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fe5a 	bl	8003ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b08c      	sub	sp, #48	; 0x30
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b22      	cmp	r3, #34	; 0x22
 8003e28:	f040 80ab 	bne.w	8003f82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e34:	d117      	bne.n	8003e66 <UART_Receive_IT+0x50>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d113      	bne.n	8003e66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	1c9a      	adds	r2, r3, #2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
 8003e64:	e026      	b.n	8003eb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e78:	d007      	beq.n	8003e8a <UART_Receive_IT+0x74>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <UART_Receive_IT+0x82>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	e008      	b.n	8003eaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d15a      	bne.n	8003f7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0220 	bic.w	r2, r2, #32
 8003ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d135      	bne.n	8003f74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f023 0310 	bic.w	r3, r3, #16
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	623a      	str	r2, [r7, #32]
 8003f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	69f9      	ldr	r1, [r7, #28]
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e5      	bne.n	8003f0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d10a      	bne.n	8003f66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff fdbb 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
 8003f72:	e002      	b.n	8003f7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7fc fe41 	bl	8000bfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e002      	b.n	8003f84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
  }
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3730      	adds	r7, #48	; 0x30
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f90:	b0c0      	sub	sp, #256	; 0x100
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	68d9      	ldr	r1, [r3, #12]
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	ea40 0301 	orr.w	r3, r0, r1
 8003fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fe4:	f021 010c 	bic.w	r1, r1, #12
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	6999      	ldr	r1, [r3, #24]
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	ea40 0301 	orr.w	r3, r0, r1
 8004012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b8f      	ldr	r3, [pc, #572]	; (8004258 <UART_SetConfig+0x2cc>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d005      	beq.n	800402c <UART_SetConfig+0xa0>
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b8d      	ldr	r3, [pc, #564]	; (800425c <UART_SetConfig+0x2d0>)
 8004028:	429a      	cmp	r2, r3
 800402a:	d104      	bne.n	8004036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800402c:	f7fe fb7a 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 8004030:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004034:	e003      	b.n	800403e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004036:	f7fe fb61 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 800403a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004048:	f040 810c 	bne.w	8004264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800404c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004056:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800405a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800405e:	4622      	mov	r2, r4
 8004060:	462b      	mov	r3, r5
 8004062:	1891      	adds	r1, r2, r2
 8004064:	65b9      	str	r1, [r7, #88]	; 0x58
 8004066:	415b      	adcs	r3, r3
 8004068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800406a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800406e:	4621      	mov	r1, r4
 8004070:	eb12 0801 	adds.w	r8, r2, r1
 8004074:	4629      	mov	r1, r5
 8004076:	eb43 0901 	adc.w	r9, r3, r1
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800408a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408e:	4690      	mov	r8, r2
 8004090:	4699      	mov	r9, r3
 8004092:	4623      	mov	r3, r4
 8004094:	eb18 0303 	adds.w	r3, r8, r3
 8004098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800409c:	462b      	mov	r3, r5
 800409e:	eb49 0303 	adc.w	r3, r9, r3
 80040a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040ba:	460b      	mov	r3, r1
 80040bc:	18db      	adds	r3, r3, r3
 80040be:	653b      	str	r3, [r7, #80]	; 0x50
 80040c0:	4613      	mov	r3, r2
 80040c2:	eb42 0303 	adc.w	r3, r2, r3
 80040c6:	657b      	str	r3, [r7, #84]	; 0x54
 80040c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040d0:	f7fc f8ee 	bl	80002b0 <__aeabi_uldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4b61      	ldr	r3, [pc, #388]	; (8004260 <UART_SetConfig+0x2d4>)
 80040da:	fba3 2302 	umull	r2, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	011c      	lsls	r4, r3, #4
 80040e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	1891      	adds	r1, r2, r2
 80040fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80040fc:	415b      	adcs	r3, r3
 80040fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004104:	4641      	mov	r1, r8
 8004106:	eb12 0a01 	adds.w	sl, r2, r1
 800410a:	4649      	mov	r1, r9
 800410c:	eb43 0b01 	adc.w	fp, r3, r1
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800411c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004124:	4692      	mov	sl, r2
 8004126:	469b      	mov	fp, r3
 8004128:	4643      	mov	r3, r8
 800412a:	eb1a 0303 	adds.w	r3, sl, r3
 800412e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004132:	464b      	mov	r3, r9
 8004134:	eb4b 0303 	adc.w	r3, fp, r3
 8004138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004148:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800414c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004150:	460b      	mov	r3, r1
 8004152:	18db      	adds	r3, r3, r3
 8004154:	643b      	str	r3, [r7, #64]	; 0x40
 8004156:	4613      	mov	r3, r2
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	647b      	str	r3, [r7, #68]	; 0x44
 800415e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004166:	f7fc f8a3 	bl	80002b0 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4611      	mov	r1, r2
 8004170:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <UART_SetConfig+0x2d4>)
 8004172:	fba3 2301 	umull	r2, r3, r3, r1
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	2264      	movs	r2, #100	; 0x64
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	1acb      	subs	r3, r1, r3
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004186:	4b36      	ldr	r3, [pc, #216]	; (8004260 <UART_SetConfig+0x2d4>)
 8004188:	fba3 2302 	umull	r2, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004194:	441c      	add	r4, r3
 8004196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800419a:	2200      	movs	r2, #0
 800419c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041a8:	4642      	mov	r2, r8
 80041aa:	464b      	mov	r3, r9
 80041ac:	1891      	adds	r1, r2, r2
 80041ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80041b0:	415b      	adcs	r3, r3
 80041b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041b8:	4641      	mov	r1, r8
 80041ba:	1851      	adds	r1, r2, r1
 80041bc:	6339      	str	r1, [r7, #48]	; 0x30
 80041be:	4649      	mov	r1, r9
 80041c0:	414b      	adcs	r3, r1
 80041c2:	637b      	str	r3, [r7, #52]	; 0x34
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041d0:	4659      	mov	r1, fp
 80041d2:	00cb      	lsls	r3, r1, #3
 80041d4:	4651      	mov	r1, sl
 80041d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041da:	4651      	mov	r1, sl
 80041dc:	00ca      	lsls	r2, r1, #3
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	4603      	mov	r3, r0
 80041e4:	4642      	mov	r2, r8
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041ec:	464b      	mov	r3, r9
 80041ee:	460a      	mov	r2, r1
 80041f0:	eb42 0303 	adc.w	r3, r2, r3
 80041f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004204:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800420c:	460b      	mov	r3, r1
 800420e:	18db      	adds	r3, r3, r3
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
 8004212:	4613      	mov	r3, r2
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800421e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004222:	f7fc f845 	bl	80002b0 <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <UART_SetConfig+0x2d4>)
 800422c:	fba3 1302 	umull	r1, r3, r3, r2
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	2164      	movs	r1, #100	; 0x64
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	3332      	adds	r3, #50	; 0x32
 800423e:	4a08      	ldr	r2, [pc, #32]	; (8004260 <UART_SetConfig+0x2d4>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	f003 0207 	and.w	r2, r3, #7
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4422      	add	r2, r4
 8004252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004254:	e106      	b.n	8004464 <UART_SetConfig+0x4d8>
 8004256:	bf00      	nop
 8004258:	40011000 	.word	0x40011000
 800425c:	40011400 	.word	0x40011400
 8004260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004268:	2200      	movs	r2, #0
 800426a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800426e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004276:	4642      	mov	r2, r8
 8004278:	464b      	mov	r3, r9
 800427a:	1891      	adds	r1, r2, r2
 800427c:	6239      	str	r1, [r7, #32]
 800427e:	415b      	adcs	r3, r3
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
 8004282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004286:	4641      	mov	r1, r8
 8004288:	1854      	adds	r4, r2, r1
 800428a:	4649      	mov	r1, r9
 800428c:	eb43 0501 	adc.w	r5, r3, r1
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	00eb      	lsls	r3, r5, #3
 800429a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800429e:	00e2      	lsls	r2, r4, #3
 80042a0:	4614      	mov	r4, r2
 80042a2:	461d      	mov	r5, r3
 80042a4:	4643      	mov	r3, r8
 80042a6:	18e3      	adds	r3, r4, r3
 80042a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042ac:	464b      	mov	r3, r9
 80042ae:	eb45 0303 	adc.w	r3, r5, r3
 80042b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042d2:	4629      	mov	r1, r5
 80042d4:	008b      	lsls	r3, r1, #2
 80042d6:	4621      	mov	r1, r4
 80042d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042dc:	4621      	mov	r1, r4
 80042de:	008a      	lsls	r2, r1, #2
 80042e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042e4:	f7fb ffe4 	bl	80002b0 <__aeabi_uldivmod>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4b60      	ldr	r3, [pc, #384]	; (8004470 <UART_SetConfig+0x4e4>)
 80042ee:	fba3 2302 	umull	r2, r3, r3, r2
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	011c      	lsls	r4, r3, #4
 80042f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004300:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004308:	4642      	mov	r2, r8
 800430a:	464b      	mov	r3, r9
 800430c:	1891      	adds	r1, r2, r2
 800430e:	61b9      	str	r1, [r7, #24]
 8004310:	415b      	adcs	r3, r3
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004318:	4641      	mov	r1, r8
 800431a:	1851      	adds	r1, r2, r1
 800431c:	6139      	str	r1, [r7, #16]
 800431e:	4649      	mov	r1, r9
 8004320:	414b      	adcs	r3, r1
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004330:	4659      	mov	r1, fp
 8004332:	00cb      	lsls	r3, r1, #3
 8004334:	4651      	mov	r1, sl
 8004336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800433a:	4651      	mov	r1, sl
 800433c:	00ca      	lsls	r2, r1, #3
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	4603      	mov	r3, r0
 8004344:	4642      	mov	r2, r8
 8004346:	189b      	adds	r3, r3, r2
 8004348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800434c:	464b      	mov	r3, r9
 800434e:	460a      	mov	r2, r1
 8004350:	eb42 0303 	adc.w	r3, r2, r3
 8004354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	67bb      	str	r3, [r7, #120]	; 0x78
 8004362:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004370:	4649      	mov	r1, r9
 8004372:	008b      	lsls	r3, r1, #2
 8004374:	4641      	mov	r1, r8
 8004376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800437a:	4641      	mov	r1, r8
 800437c:	008a      	lsls	r2, r1, #2
 800437e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004382:	f7fb ff95 	bl	80002b0 <__aeabi_uldivmod>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4611      	mov	r1, r2
 800438c:	4b38      	ldr	r3, [pc, #224]	; (8004470 <UART_SetConfig+0x4e4>)
 800438e:	fba3 2301 	umull	r2, r3, r3, r1
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	2264      	movs	r2, #100	; 0x64
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	1acb      	subs	r3, r1, r3
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	3332      	adds	r3, #50	; 0x32
 80043a0:	4a33      	ldr	r2, [pc, #204]	; (8004470 <UART_SetConfig+0x4e4>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ac:	441c      	add	r4, r3
 80043ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b2:	2200      	movs	r2, #0
 80043b4:	673b      	str	r3, [r7, #112]	; 0x70
 80043b6:	677a      	str	r2, [r7, #116]	; 0x74
 80043b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043bc:	4642      	mov	r2, r8
 80043be:	464b      	mov	r3, r9
 80043c0:	1891      	adds	r1, r2, r2
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	415b      	adcs	r3, r3
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043cc:	4641      	mov	r1, r8
 80043ce:	1851      	adds	r1, r2, r1
 80043d0:	6039      	str	r1, [r7, #0]
 80043d2:	4649      	mov	r1, r9
 80043d4:	414b      	adcs	r3, r1
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043e4:	4659      	mov	r1, fp
 80043e6:	00cb      	lsls	r3, r1, #3
 80043e8:	4651      	mov	r1, sl
 80043ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ee:	4651      	mov	r1, sl
 80043f0:	00ca      	lsls	r2, r1, #3
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	4642      	mov	r2, r8
 80043fa:	189b      	adds	r3, r3, r2
 80043fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80043fe:	464b      	mov	r3, r9
 8004400:	460a      	mov	r2, r1
 8004402:	eb42 0303 	adc.w	r3, r2, r3
 8004406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	663b      	str	r3, [r7, #96]	; 0x60
 8004412:	667a      	str	r2, [r7, #100]	; 0x64
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004420:	4649      	mov	r1, r9
 8004422:	008b      	lsls	r3, r1, #2
 8004424:	4641      	mov	r1, r8
 8004426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800442a:	4641      	mov	r1, r8
 800442c:	008a      	lsls	r2, r1, #2
 800442e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004432:	f7fb ff3d 	bl	80002b0 <__aeabi_uldivmod>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <UART_SetConfig+0x4e4>)
 800443c:	fba3 1302 	umull	r1, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	2164      	movs	r1, #100	; 0x64
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	3332      	adds	r3, #50	; 0x32
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <UART_SetConfig+0x4e4>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	f003 020f 	and.w	r2, r3, #15
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4422      	add	r2, r4
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800446a:	46bd      	mov	sp, r7
 800446c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004470:	51eb851f 	.word	0x51eb851f

08004474 <atoi>:
 8004474:	220a      	movs	r2, #10
 8004476:	2100      	movs	r1, #0
 8004478:	f000 b94c 	b.w	8004714 <strtol>

0800447c <calloc>:
 800447c:	4b02      	ldr	r3, [pc, #8]	; (8004488 <calloc+0xc>)
 800447e:	460a      	mov	r2, r1
 8004480:	4601      	mov	r1, r0
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	f000 b802 	b.w	800448c <_calloc_r>
 8004488:	20000064 	.word	0x20000064

0800448c <_calloc_r>:
 800448c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800448e:	fba1 2402 	umull	r2, r4, r1, r2
 8004492:	b94c      	cbnz	r4, 80044a8 <_calloc_r+0x1c>
 8004494:	4611      	mov	r1, r2
 8004496:	9201      	str	r2, [sp, #4]
 8004498:	f000 f82e 	bl	80044f8 <_malloc_r>
 800449c:	9a01      	ldr	r2, [sp, #4]
 800449e:	4605      	mov	r5, r0
 80044a0:	b930      	cbnz	r0, 80044b0 <_calloc_r+0x24>
 80044a2:	4628      	mov	r0, r5
 80044a4:	b003      	add	sp, #12
 80044a6:	bd30      	pop	{r4, r5, pc}
 80044a8:	220c      	movs	r2, #12
 80044aa:	6002      	str	r2, [r0, #0]
 80044ac:	2500      	movs	r5, #0
 80044ae:	e7f8      	b.n	80044a2 <_calloc_r+0x16>
 80044b0:	4621      	mov	r1, r4
 80044b2:	f000 fa4c 	bl	800494e <memset>
 80044b6:	e7f4      	b.n	80044a2 <_calloc_r+0x16>

080044b8 <sbrk_aligned>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	4e0e      	ldr	r6, [pc, #56]	; (80044f4 <sbrk_aligned+0x3c>)
 80044bc:	460c      	mov	r4, r1
 80044be:	6831      	ldr	r1, [r6, #0]
 80044c0:	4605      	mov	r5, r0
 80044c2:	b911      	cbnz	r1, 80044ca <sbrk_aligned+0x12>
 80044c4:	f000 faee 	bl	8004aa4 <_sbrk_r>
 80044c8:	6030      	str	r0, [r6, #0]
 80044ca:	4621      	mov	r1, r4
 80044cc:	4628      	mov	r0, r5
 80044ce:	f000 fae9 	bl	8004aa4 <_sbrk_r>
 80044d2:	1c43      	adds	r3, r0, #1
 80044d4:	d00a      	beq.n	80044ec <sbrk_aligned+0x34>
 80044d6:	1cc4      	adds	r4, r0, #3
 80044d8:	f024 0403 	bic.w	r4, r4, #3
 80044dc:	42a0      	cmp	r0, r4
 80044de:	d007      	beq.n	80044f0 <sbrk_aligned+0x38>
 80044e0:	1a21      	subs	r1, r4, r0
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 fade 	bl	8004aa4 <_sbrk_r>
 80044e8:	3001      	adds	r0, #1
 80044ea:	d101      	bne.n	80044f0 <sbrk_aligned+0x38>
 80044ec:	f04f 34ff 	mov.w	r4, #4294967295
 80044f0:	4620      	mov	r0, r4
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	20000140 	.word	0x20000140

080044f8 <_malloc_r>:
 80044f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044fc:	1ccd      	adds	r5, r1, #3
 80044fe:	f025 0503 	bic.w	r5, r5, #3
 8004502:	3508      	adds	r5, #8
 8004504:	2d0c      	cmp	r5, #12
 8004506:	bf38      	it	cc
 8004508:	250c      	movcc	r5, #12
 800450a:	2d00      	cmp	r5, #0
 800450c:	4607      	mov	r7, r0
 800450e:	db01      	blt.n	8004514 <_malloc_r+0x1c>
 8004510:	42a9      	cmp	r1, r5
 8004512:	d905      	bls.n	8004520 <_malloc_r+0x28>
 8004514:	230c      	movs	r3, #12
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	2600      	movs	r6, #0
 800451a:	4630      	mov	r0, r6
 800451c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045f4 <_malloc_r+0xfc>
 8004524:	f000 f868 	bl	80045f8 <__malloc_lock>
 8004528:	f8d8 3000 	ldr.w	r3, [r8]
 800452c:	461c      	mov	r4, r3
 800452e:	bb5c      	cbnz	r4, 8004588 <_malloc_r+0x90>
 8004530:	4629      	mov	r1, r5
 8004532:	4638      	mov	r0, r7
 8004534:	f7ff ffc0 	bl	80044b8 <sbrk_aligned>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	4604      	mov	r4, r0
 800453c:	d155      	bne.n	80045ea <_malloc_r+0xf2>
 800453e:	f8d8 4000 	ldr.w	r4, [r8]
 8004542:	4626      	mov	r6, r4
 8004544:	2e00      	cmp	r6, #0
 8004546:	d145      	bne.n	80045d4 <_malloc_r+0xdc>
 8004548:	2c00      	cmp	r4, #0
 800454a:	d048      	beq.n	80045de <_malloc_r+0xe6>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	4631      	mov	r1, r6
 8004550:	4638      	mov	r0, r7
 8004552:	eb04 0903 	add.w	r9, r4, r3
 8004556:	f000 faa5 	bl	8004aa4 <_sbrk_r>
 800455a:	4581      	cmp	r9, r0
 800455c:	d13f      	bne.n	80045de <_malloc_r+0xe6>
 800455e:	6821      	ldr	r1, [r4, #0]
 8004560:	1a6d      	subs	r5, r5, r1
 8004562:	4629      	mov	r1, r5
 8004564:	4638      	mov	r0, r7
 8004566:	f7ff ffa7 	bl	80044b8 <sbrk_aligned>
 800456a:	3001      	adds	r0, #1
 800456c:	d037      	beq.n	80045de <_malloc_r+0xe6>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	442b      	add	r3, r5
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	f8d8 3000 	ldr.w	r3, [r8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d038      	beq.n	80045ee <_malloc_r+0xf6>
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	42a2      	cmp	r2, r4
 8004580:	d12b      	bne.n	80045da <_malloc_r+0xe2>
 8004582:	2200      	movs	r2, #0
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	e00f      	b.n	80045a8 <_malloc_r+0xb0>
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	1b52      	subs	r2, r2, r5
 800458c:	d41f      	bmi.n	80045ce <_malloc_r+0xd6>
 800458e:	2a0b      	cmp	r2, #11
 8004590:	d917      	bls.n	80045c2 <_malloc_r+0xca>
 8004592:	1961      	adds	r1, r4, r5
 8004594:	42a3      	cmp	r3, r4
 8004596:	6025      	str	r5, [r4, #0]
 8004598:	bf18      	it	ne
 800459a:	6059      	strne	r1, [r3, #4]
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	bf08      	it	eq
 80045a0:	f8c8 1000 	streq.w	r1, [r8]
 80045a4:	5162      	str	r2, [r4, r5]
 80045a6:	604b      	str	r3, [r1, #4]
 80045a8:	4638      	mov	r0, r7
 80045aa:	f104 060b 	add.w	r6, r4, #11
 80045ae:	f000 f829 	bl	8004604 <__malloc_unlock>
 80045b2:	f026 0607 	bic.w	r6, r6, #7
 80045b6:	1d23      	adds	r3, r4, #4
 80045b8:	1af2      	subs	r2, r6, r3
 80045ba:	d0ae      	beq.n	800451a <_malloc_r+0x22>
 80045bc:	1b9b      	subs	r3, r3, r6
 80045be:	50a3      	str	r3, [r4, r2]
 80045c0:	e7ab      	b.n	800451a <_malloc_r+0x22>
 80045c2:	42a3      	cmp	r3, r4
 80045c4:	6862      	ldr	r2, [r4, #4]
 80045c6:	d1dd      	bne.n	8004584 <_malloc_r+0x8c>
 80045c8:	f8c8 2000 	str.w	r2, [r8]
 80045cc:	e7ec      	b.n	80045a8 <_malloc_r+0xb0>
 80045ce:	4623      	mov	r3, r4
 80045d0:	6864      	ldr	r4, [r4, #4]
 80045d2:	e7ac      	b.n	800452e <_malloc_r+0x36>
 80045d4:	4634      	mov	r4, r6
 80045d6:	6876      	ldr	r6, [r6, #4]
 80045d8:	e7b4      	b.n	8004544 <_malloc_r+0x4c>
 80045da:	4613      	mov	r3, r2
 80045dc:	e7cc      	b.n	8004578 <_malloc_r+0x80>
 80045de:	230c      	movs	r3, #12
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	4638      	mov	r0, r7
 80045e4:	f000 f80e 	bl	8004604 <__malloc_unlock>
 80045e8:	e797      	b.n	800451a <_malloc_r+0x22>
 80045ea:	6025      	str	r5, [r4, #0]
 80045ec:	e7dc      	b.n	80045a8 <_malloc_r+0xb0>
 80045ee:	605b      	str	r3, [r3, #4]
 80045f0:	deff      	udf	#255	; 0xff
 80045f2:	bf00      	nop
 80045f4:	2000013c 	.word	0x2000013c

080045f8 <__malloc_lock>:
 80045f8:	4801      	ldr	r0, [pc, #4]	; (8004600 <__malloc_lock+0x8>)
 80045fa:	f000 ba9f 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 80045fe:	bf00      	nop
 8004600:	20000284 	.word	0x20000284

08004604 <__malloc_unlock>:
 8004604:	4801      	ldr	r0, [pc, #4]	; (800460c <__malloc_unlock+0x8>)
 8004606:	f000 ba9a 	b.w	8004b3e <__retarget_lock_release_recursive>
 800460a:	bf00      	nop
 800460c:	20000284 	.word	0x20000284

08004610 <_strtol_l.constprop.0>:
 8004610:	2b01      	cmp	r3, #1
 8004612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004616:	d001      	beq.n	800461c <_strtol_l.constprop.0+0xc>
 8004618:	2b24      	cmp	r3, #36	; 0x24
 800461a:	d906      	bls.n	800462a <_strtol_l.constprop.0+0x1a>
 800461c:	f000 fa64 	bl	8004ae8 <__errno>
 8004620:	2316      	movs	r3, #22
 8004622:	6003      	str	r3, [r0, #0]
 8004624:	2000      	movs	r0, #0
 8004626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004710 <_strtol_l.constprop.0+0x100>
 800462e:	460d      	mov	r5, r1
 8004630:	462e      	mov	r6, r5
 8004632:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004636:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800463a:	f017 0708 	ands.w	r7, r7, #8
 800463e:	d1f7      	bne.n	8004630 <_strtol_l.constprop.0+0x20>
 8004640:	2c2d      	cmp	r4, #45	; 0x2d
 8004642:	d132      	bne.n	80046aa <_strtol_l.constprop.0+0x9a>
 8004644:	782c      	ldrb	r4, [r5, #0]
 8004646:	2701      	movs	r7, #1
 8004648:	1cb5      	adds	r5, r6, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d05b      	beq.n	8004706 <_strtol_l.constprop.0+0xf6>
 800464e:	2b10      	cmp	r3, #16
 8004650:	d109      	bne.n	8004666 <_strtol_l.constprop.0+0x56>
 8004652:	2c30      	cmp	r4, #48	; 0x30
 8004654:	d107      	bne.n	8004666 <_strtol_l.constprop.0+0x56>
 8004656:	782c      	ldrb	r4, [r5, #0]
 8004658:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800465c:	2c58      	cmp	r4, #88	; 0x58
 800465e:	d14d      	bne.n	80046fc <_strtol_l.constprop.0+0xec>
 8004660:	786c      	ldrb	r4, [r5, #1]
 8004662:	2310      	movs	r3, #16
 8004664:	3502      	adds	r5, #2
 8004666:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800466a:	f108 38ff 	add.w	r8, r8, #4294967295
 800466e:	f04f 0e00 	mov.w	lr, #0
 8004672:	fbb8 f9f3 	udiv	r9, r8, r3
 8004676:	4676      	mov	r6, lr
 8004678:	fb03 8a19 	mls	sl, r3, r9, r8
 800467c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004680:	f1bc 0f09 	cmp.w	ip, #9
 8004684:	d816      	bhi.n	80046b4 <_strtol_l.constprop.0+0xa4>
 8004686:	4664      	mov	r4, ip
 8004688:	42a3      	cmp	r3, r4
 800468a:	dd24      	ble.n	80046d6 <_strtol_l.constprop.0+0xc6>
 800468c:	f1be 3fff 	cmp.w	lr, #4294967295
 8004690:	d008      	beq.n	80046a4 <_strtol_l.constprop.0+0x94>
 8004692:	45b1      	cmp	r9, r6
 8004694:	d31c      	bcc.n	80046d0 <_strtol_l.constprop.0+0xc0>
 8004696:	d101      	bne.n	800469c <_strtol_l.constprop.0+0x8c>
 8004698:	45a2      	cmp	sl, r4
 800469a:	db19      	blt.n	80046d0 <_strtol_l.constprop.0+0xc0>
 800469c:	fb06 4603 	mla	r6, r6, r3, r4
 80046a0:	f04f 0e01 	mov.w	lr, #1
 80046a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046a8:	e7e8      	b.n	800467c <_strtol_l.constprop.0+0x6c>
 80046aa:	2c2b      	cmp	r4, #43	; 0x2b
 80046ac:	bf04      	itt	eq
 80046ae:	782c      	ldrbeq	r4, [r5, #0]
 80046b0:	1cb5      	addeq	r5, r6, #2
 80046b2:	e7ca      	b.n	800464a <_strtol_l.constprop.0+0x3a>
 80046b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80046b8:	f1bc 0f19 	cmp.w	ip, #25
 80046bc:	d801      	bhi.n	80046c2 <_strtol_l.constprop.0+0xb2>
 80046be:	3c37      	subs	r4, #55	; 0x37
 80046c0:	e7e2      	b.n	8004688 <_strtol_l.constprop.0+0x78>
 80046c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80046c6:	f1bc 0f19 	cmp.w	ip, #25
 80046ca:	d804      	bhi.n	80046d6 <_strtol_l.constprop.0+0xc6>
 80046cc:	3c57      	subs	r4, #87	; 0x57
 80046ce:	e7db      	b.n	8004688 <_strtol_l.constprop.0+0x78>
 80046d0:	f04f 3eff 	mov.w	lr, #4294967295
 80046d4:	e7e6      	b.n	80046a4 <_strtol_l.constprop.0+0x94>
 80046d6:	f1be 3fff 	cmp.w	lr, #4294967295
 80046da:	d105      	bne.n	80046e8 <_strtol_l.constprop.0+0xd8>
 80046dc:	2322      	movs	r3, #34	; 0x22
 80046de:	6003      	str	r3, [r0, #0]
 80046e0:	4646      	mov	r6, r8
 80046e2:	b942      	cbnz	r2, 80046f6 <_strtol_l.constprop.0+0xe6>
 80046e4:	4630      	mov	r0, r6
 80046e6:	e79e      	b.n	8004626 <_strtol_l.constprop.0+0x16>
 80046e8:	b107      	cbz	r7, 80046ec <_strtol_l.constprop.0+0xdc>
 80046ea:	4276      	negs	r6, r6
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	d0f9      	beq.n	80046e4 <_strtol_l.constprop.0+0xd4>
 80046f0:	f1be 0f00 	cmp.w	lr, #0
 80046f4:	d000      	beq.n	80046f8 <_strtol_l.constprop.0+0xe8>
 80046f6:	1e69      	subs	r1, r5, #1
 80046f8:	6011      	str	r1, [r2, #0]
 80046fa:	e7f3      	b.n	80046e4 <_strtol_l.constprop.0+0xd4>
 80046fc:	2430      	movs	r4, #48	; 0x30
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1b1      	bne.n	8004666 <_strtol_l.constprop.0+0x56>
 8004702:	2308      	movs	r3, #8
 8004704:	e7af      	b.n	8004666 <_strtol_l.constprop.0+0x56>
 8004706:	2c30      	cmp	r4, #48	; 0x30
 8004708:	d0a5      	beq.n	8004656 <_strtol_l.constprop.0+0x46>
 800470a:	230a      	movs	r3, #10
 800470c:	e7ab      	b.n	8004666 <_strtol_l.constprop.0+0x56>
 800470e:	bf00      	nop
 8004710:	08005a79 	.word	0x08005a79

08004714 <strtol>:
 8004714:	4613      	mov	r3, r2
 8004716:	460a      	mov	r2, r1
 8004718:	4601      	mov	r1, r0
 800471a:	4802      	ldr	r0, [pc, #8]	; (8004724 <strtol+0x10>)
 800471c:	6800      	ldr	r0, [r0, #0]
 800471e:	f7ff bf77 	b.w	8004610 <_strtol_l.constprop.0>
 8004722:	bf00      	nop
 8004724:	20000064 	.word	0x20000064

08004728 <std>:
 8004728:	2300      	movs	r3, #0
 800472a:	b510      	push	{r4, lr}
 800472c:	4604      	mov	r4, r0
 800472e:	e9c0 3300 	strd	r3, r3, [r0]
 8004732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004736:	6083      	str	r3, [r0, #8]
 8004738:	8181      	strh	r1, [r0, #12]
 800473a:	6643      	str	r3, [r0, #100]	; 0x64
 800473c:	81c2      	strh	r2, [r0, #14]
 800473e:	6183      	str	r3, [r0, #24]
 8004740:	4619      	mov	r1, r3
 8004742:	2208      	movs	r2, #8
 8004744:	305c      	adds	r0, #92	; 0x5c
 8004746:	f000 f902 	bl	800494e <memset>
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <std+0x38>)
 800474c:	6263      	str	r3, [r4, #36]	; 0x24
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <std+0x3c>)
 8004750:	62a3      	str	r3, [r4, #40]	; 0x28
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <std+0x40>)
 8004754:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <std+0x44>)
 8004758:	6224      	str	r4, [r4, #32]
 800475a:	6323      	str	r3, [r4, #48]	; 0x30
 800475c:	bd10      	pop	{r4, pc}
 800475e:	bf00      	nop
 8004760:	080048c9 	.word	0x080048c9
 8004764:	080048eb 	.word	0x080048eb
 8004768:	08004923 	.word	0x08004923
 800476c:	08004947 	.word	0x08004947

08004770 <stdio_exit_handler>:
 8004770:	4a02      	ldr	r2, [pc, #8]	; (800477c <stdio_exit_handler+0xc>)
 8004772:	4903      	ldr	r1, [pc, #12]	; (8004780 <stdio_exit_handler+0x10>)
 8004774:	4803      	ldr	r0, [pc, #12]	; (8004784 <stdio_exit_handler+0x14>)
 8004776:	f000 b869 	b.w	800484c <_fwalk_sglue>
 800477a:	bf00      	nop
 800477c:	2000000c 	.word	0x2000000c
 8004780:	08005301 	.word	0x08005301
 8004784:	20000018 	.word	0x20000018

08004788 <cleanup_stdio>:
 8004788:	6841      	ldr	r1, [r0, #4]
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <cleanup_stdio+0x34>)
 800478c:	4299      	cmp	r1, r3
 800478e:	b510      	push	{r4, lr}
 8004790:	4604      	mov	r4, r0
 8004792:	d001      	beq.n	8004798 <cleanup_stdio+0x10>
 8004794:	f000 fdb4 	bl	8005300 <_fflush_r>
 8004798:	68a1      	ldr	r1, [r4, #8]
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <cleanup_stdio+0x38>)
 800479c:	4299      	cmp	r1, r3
 800479e:	d002      	beq.n	80047a6 <cleanup_stdio+0x1e>
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 fdad 	bl	8005300 <_fflush_r>
 80047a6:	68e1      	ldr	r1, [r4, #12]
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <cleanup_stdio+0x3c>)
 80047aa:	4299      	cmp	r1, r3
 80047ac:	d004      	beq.n	80047b8 <cleanup_stdio+0x30>
 80047ae:	4620      	mov	r0, r4
 80047b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b4:	f000 bda4 	b.w	8005300 <_fflush_r>
 80047b8:	bd10      	pop	{r4, pc}
 80047ba:	bf00      	nop
 80047bc:	20000144 	.word	0x20000144
 80047c0:	200001ac 	.word	0x200001ac
 80047c4:	20000214 	.word	0x20000214

080047c8 <global_stdio_init.part.0>:
 80047c8:	b510      	push	{r4, lr}
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <global_stdio_init.part.0+0x30>)
 80047cc:	4c0b      	ldr	r4, [pc, #44]	; (80047fc <global_stdio_init.part.0+0x34>)
 80047ce:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <global_stdio_init.part.0+0x38>)
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	4620      	mov	r0, r4
 80047d4:	2200      	movs	r2, #0
 80047d6:	2104      	movs	r1, #4
 80047d8:	f7ff ffa6 	bl	8004728 <std>
 80047dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80047e0:	2201      	movs	r2, #1
 80047e2:	2109      	movs	r1, #9
 80047e4:	f7ff ffa0 	bl	8004728 <std>
 80047e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80047ec:	2202      	movs	r2, #2
 80047ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f2:	2112      	movs	r1, #18
 80047f4:	f7ff bf98 	b.w	8004728 <std>
 80047f8:	2000027c 	.word	0x2000027c
 80047fc:	20000144 	.word	0x20000144
 8004800:	08004771 	.word	0x08004771

08004804 <__sfp_lock_acquire>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__sfp_lock_acquire+0x8>)
 8004806:	f000 b999 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 800480a:	bf00      	nop
 800480c:	20000285 	.word	0x20000285

08004810 <__sfp_lock_release>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__sfp_lock_release+0x8>)
 8004812:	f000 b994 	b.w	8004b3e <__retarget_lock_release_recursive>
 8004816:	bf00      	nop
 8004818:	20000285 	.word	0x20000285

0800481c <__sinit>:
 800481c:	b510      	push	{r4, lr}
 800481e:	4604      	mov	r4, r0
 8004820:	f7ff fff0 	bl	8004804 <__sfp_lock_acquire>
 8004824:	6a23      	ldr	r3, [r4, #32]
 8004826:	b11b      	cbz	r3, 8004830 <__sinit+0x14>
 8004828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800482c:	f7ff bff0 	b.w	8004810 <__sfp_lock_release>
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <__sinit+0x28>)
 8004832:	6223      	str	r3, [r4, #32]
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <__sinit+0x2c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f5      	bne.n	8004828 <__sinit+0xc>
 800483c:	f7ff ffc4 	bl	80047c8 <global_stdio_init.part.0>
 8004840:	e7f2      	b.n	8004828 <__sinit+0xc>
 8004842:	bf00      	nop
 8004844:	08004789 	.word	0x08004789
 8004848:	2000027c 	.word	0x2000027c

0800484c <_fwalk_sglue>:
 800484c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004850:	4607      	mov	r7, r0
 8004852:	4688      	mov	r8, r1
 8004854:	4614      	mov	r4, r2
 8004856:	2600      	movs	r6, #0
 8004858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800485c:	f1b9 0901 	subs.w	r9, r9, #1
 8004860:	d505      	bpl.n	800486e <_fwalk_sglue+0x22>
 8004862:	6824      	ldr	r4, [r4, #0]
 8004864:	2c00      	cmp	r4, #0
 8004866:	d1f7      	bne.n	8004858 <_fwalk_sglue+0xc>
 8004868:	4630      	mov	r0, r6
 800486a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800486e:	89ab      	ldrh	r3, [r5, #12]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d907      	bls.n	8004884 <_fwalk_sglue+0x38>
 8004874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004878:	3301      	adds	r3, #1
 800487a:	d003      	beq.n	8004884 <_fwalk_sglue+0x38>
 800487c:	4629      	mov	r1, r5
 800487e:	4638      	mov	r0, r7
 8004880:	47c0      	blx	r8
 8004882:	4306      	orrs	r6, r0
 8004884:	3568      	adds	r5, #104	; 0x68
 8004886:	e7e9      	b.n	800485c <_fwalk_sglue+0x10>

08004888 <siprintf>:
 8004888:	b40e      	push	{r1, r2, r3}
 800488a:	b500      	push	{lr}
 800488c:	b09c      	sub	sp, #112	; 0x70
 800488e:	ab1d      	add	r3, sp, #116	; 0x74
 8004890:	9002      	str	r0, [sp, #8]
 8004892:	9006      	str	r0, [sp, #24]
 8004894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004898:	4809      	ldr	r0, [pc, #36]	; (80048c0 <siprintf+0x38>)
 800489a:	9107      	str	r1, [sp, #28]
 800489c:	9104      	str	r1, [sp, #16]
 800489e:	4909      	ldr	r1, [pc, #36]	; (80048c4 <siprintf+0x3c>)
 80048a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a4:	9105      	str	r1, [sp, #20]
 80048a6:	6800      	ldr	r0, [r0, #0]
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	a902      	add	r1, sp, #8
 80048ac:	f000 fa14 	bl	8004cd8 <_svfiprintf_r>
 80048b0:	9b02      	ldr	r3, [sp, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	b01c      	add	sp, #112	; 0x70
 80048b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048bc:	b003      	add	sp, #12
 80048be:	4770      	bx	lr
 80048c0:	20000064 	.word	0x20000064
 80048c4:	ffff0208 	.word	0xffff0208

080048c8 <__sread>:
 80048c8:	b510      	push	{r4, lr}
 80048ca:	460c      	mov	r4, r1
 80048cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d0:	f000 f8d6 	bl	8004a80 <_read_r>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	bfab      	itete	ge
 80048d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048da:	89a3      	ldrhlt	r3, [r4, #12]
 80048dc:	181b      	addge	r3, r3, r0
 80048de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048e2:	bfac      	ite	ge
 80048e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048e6:	81a3      	strhlt	r3, [r4, #12]
 80048e8:	bd10      	pop	{r4, pc}

080048ea <__swrite>:
 80048ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ee:	461f      	mov	r7, r3
 80048f0:	898b      	ldrh	r3, [r1, #12]
 80048f2:	05db      	lsls	r3, r3, #23
 80048f4:	4605      	mov	r5, r0
 80048f6:	460c      	mov	r4, r1
 80048f8:	4616      	mov	r6, r2
 80048fa:	d505      	bpl.n	8004908 <__swrite+0x1e>
 80048fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004900:	2302      	movs	r3, #2
 8004902:	2200      	movs	r2, #0
 8004904:	f000 f8aa 	bl	8004a5c <_lseek_r>
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800490e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	4632      	mov	r2, r6
 8004916:	463b      	mov	r3, r7
 8004918:	4628      	mov	r0, r5
 800491a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800491e:	f000 b8d1 	b.w	8004ac4 <_write_r>

08004922 <__sseek>:
 8004922:	b510      	push	{r4, lr}
 8004924:	460c      	mov	r4, r1
 8004926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492a:	f000 f897 	bl	8004a5c <_lseek_r>
 800492e:	1c43      	adds	r3, r0, #1
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	bf15      	itete	ne
 8004934:	6560      	strne	r0, [r4, #84]	; 0x54
 8004936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800493a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800493e:	81a3      	strheq	r3, [r4, #12]
 8004940:	bf18      	it	ne
 8004942:	81a3      	strhne	r3, [r4, #12]
 8004944:	bd10      	pop	{r4, pc}

08004946 <__sclose>:
 8004946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494a:	f000 b877 	b.w	8004a3c <_close_r>

0800494e <memset>:
 800494e:	4402      	add	r2, r0
 8004950:	4603      	mov	r3, r0
 8004952:	4293      	cmp	r3, r2
 8004954:	d100      	bne.n	8004958 <memset+0xa>
 8004956:	4770      	bx	lr
 8004958:	f803 1b01 	strb.w	r1, [r3], #1
 800495c:	e7f9      	b.n	8004952 <memset+0x4>

0800495e <strncpy>:
 800495e:	b510      	push	{r4, lr}
 8004960:	3901      	subs	r1, #1
 8004962:	4603      	mov	r3, r0
 8004964:	b132      	cbz	r2, 8004974 <strncpy+0x16>
 8004966:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800496a:	f803 4b01 	strb.w	r4, [r3], #1
 800496e:	3a01      	subs	r2, #1
 8004970:	2c00      	cmp	r4, #0
 8004972:	d1f7      	bne.n	8004964 <strncpy+0x6>
 8004974:	441a      	add	r2, r3
 8004976:	2100      	movs	r1, #0
 8004978:	4293      	cmp	r3, r2
 800497a:	d100      	bne.n	800497e <strncpy+0x20>
 800497c:	bd10      	pop	{r4, pc}
 800497e:	f803 1b01 	strb.w	r1, [r3], #1
 8004982:	e7f9      	b.n	8004978 <strncpy+0x1a>

08004984 <strtok>:
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <strtok+0x5c>)
 8004986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004988:	681e      	ldr	r6, [r3, #0]
 800498a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800498c:	4605      	mov	r5, r0
 800498e:	b9fc      	cbnz	r4, 80049d0 <strtok+0x4c>
 8004990:	2050      	movs	r0, #80	; 0x50
 8004992:	9101      	str	r1, [sp, #4]
 8004994:	f000 f93e 	bl	8004c14 <malloc>
 8004998:	9901      	ldr	r1, [sp, #4]
 800499a:	6470      	str	r0, [r6, #68]	; 0x44
 800499c:	4602      	mov	r2, r0
 800499e:	b920      	cbnz	r0, 80049aa <strtok+0x26>
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <strtok+0x60>)
 80049a2:	4811      	ldr	r0, [pc, #68]	; (80049e8 <strtok+0x64>)
 80049a4:	215b      	movs	r1, #91	; 0x5b
 80049a6:	f000 f8cb 	bl	8004b40 <__assert_func>
 80049aa:	e9c0 4400 	strd	r4, r4, [r0]
 80049ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80049b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80049b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80049ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80049be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80049c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80049c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80049ca:	6184      	str	r4, [r0, #24]
 80049cc:	7704      	strb	r4, [r0, #28]
 80049ce:	6244      	str	r4, [r0, #36]	; 0x24
 80049d0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80049d2:	2301      	movs	r3, #1
 80049d4:	4628      	mov	r0, r5
 80049d6:	b002      	add	sp, #8
 80049d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049dc:	f000 b806 	b.w	80049ec <__strtok_r>
 80049e0:	20000064 	.word	0x20000064
 80049e4:	08005b79 	.word	0x08005b79
 80049e8:	08005b90 	.word	0x08005b90

080049ec <__strtok_r>:
 80049ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ee:	b908      	cbnz	r0, 80049f4 <__strtok_r+0x8>
 80049f0:	6810      	ldr	r0, [r2, #0]
 80049f2:	b188      	cbz	r0, 8004a18 <__strtok_r+0x2c>
 80049f4:	4604      	mov	r4, r0
 80049f6:	4620      	mov	r0, r4
 80049f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80049fc:	460f      	mov	r7, r1
 80049fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004a02:	b91e      	cbnz	r6, 8004a0c <__strtok_r+0x20>
 8004a04:	b965      	cbnz	r5, 8004a20 <__strtok_r+0x34>
 8004a06:	6015      	str	r5, [r2, #0]
 8004a08:	4628      	mov	r0, r5
 8004a0a:	e005      	b.n	8004a18 <__strtok_r+0x2c>
 8004a0c:	42b5      	cmp	r5, r6
 8004a0e:	d1f6      	bne.n	80049fe <__strtok_r+0x12>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <__strtok_r+0xa>
 8004a14:	6014      	str	r4, [r2, #0]
 8004a16:	7003      	strb	r3, [r0, #0]
 8004a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1a:	461c      	mov	r4, r3
 8004a1c:	e00c      	b.n	8004a38 <__strtok_r+0x4c>
 8004a1e:	b915      	cbnz	r5, 8004a26 <__strtok_r+0x3a>
 8004a20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004a24:	460e      	mov	r6, r1
 8004a26:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004a2a:	42ab      	cmp	r3, r5
 8004a2c:	d1f7      	bne.n	8004a1e <__strtok_r+0x32>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f3      	beq.n	8004a1a <__strtok_r+0x2e>
 8004a32:	2300      	movs	r3, #0
 8004a34:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004a38:	6014      	str	r4, [r2, #0]
 8004a3a:	e7ed      	b.n	8004a18 <__strtok_r+0x2c>

08004a3c <_close_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d06      	ldr	r5, [pc, #24]	; (8004a58 <_close_r+0x1c>)
 8004a40:	2300      	movs	r3, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	f7fc fd6b 	bl	8001522 <_close>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_close_r+0x1a>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_close_r+0x1a>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	20000280 	.word	0x20000280

08004a5c <_lseek_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4d07      	ldr	r5, [pc, #28]	; (8004a7c <_lseek_r+0x20>)
 8004a60:	4604      	mov	r4, r0
 8004a62:	4608      	mov	r0, r1
 8004a64:	4611      	mov	r1, r2
 8004a66:	2200      	movs	r2, #0
 8004a68:	602a      	str	r2, [r5, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f7fc fd80 	bl	8001570 <_lseek>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d102      	bne.n	8004a7a <_lseek_r+0x1e>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	b103      	cbz	r3, 8004a7a <_lseek_r+0x1e>
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	20000280 	.word	0x20000280

08004a80 <_read_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4d07      	ldr	r5, [pc, #28]	; (8004aa0 <_read_r+0x20>)
 8004a84:	4604      	mov	r4, r0
 8004a86:	4608      	mov	r0, r1
 8004a88:	4611      	mov	r1, r2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	602a      	str	r2, [r5, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f7fc fd0e 	bl	80014b0 <_read>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d102      	bne.n	8004a9e <_read_r+0x1e>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	b103      	cbz	r3, 8004a9e <_read_r+0x1e>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	20000280 	.word	0x20000280

08004aa4 <_sbrk_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4d06      	ldr	r5, [pc, #24]	; (8004ac0 <_sbrk_r+0x1c>)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	f7fc fd6c 	bl	800158c <_sbrk>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_sbrk_r+0x1a>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_sbrk_r+0x1a>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	20000280 	.word	0x20000280

08004ac4 <_write_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d07      	ldr	r5, [pc, #28]	; (8004ae4 <_write_r+0x20>)
 8004ac8:	4604      	mov	r4, r0
 8004aca:	4608      	mov	r0, r1
 8004acc:	4611      	mov	r1, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	602a      	str	r2, [r5, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f7fc fd09 	bl	80014ea <_write>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_write_r+0x1e>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_write_r+0x1e>
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	20000280 	.word	0x20000280

08004ae8 <__errno>:
 8004ae8:	4b01      	ldr	r3, [pc, #4]	; (8004af0 <__errno+0x8>)
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000064 	.word	0x20000064

08004af4 <__libc_init_array>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	4d0d      	ldr	r5, [pc, #52]	; (8004b2c <__libc_init_array+0x38>)
 8004af8:	4c0d      	ldr	r4, [pc, #52]	; (8004b30 <__libc_init_array+0x3c>)
 8004afa:	1b64      	subs	r4, r4, r5
 8004afc:	10a4      	asrs	r4, r4, #2
 8004afe:	2600      	movs	r6, #0
 8004b00:	42a6      	cmp	r6, r4
 8004b02:	d109      	bne.n	8004b18 <__libc_init_array+0x24>
 8004b04:	4d0b      	ldr	r5, [pc, #44]	; (8004b34 <__libc_init_array+0x40>)
 8004b06:	4c0c      	ldr	r4, [pc, #48]	; (8004b38 <__libc_init_array+0x44>)
 8004b08:	f000 ff3c 	bl	8005984 <_init>
 8004b0c:	1b64      	subs	r4, r4, r5
 8004b0e:	10a4      	asrs	r4, r4, #2
 8004b10:	2600      	movs	r6, #0
 8004b12:	42a6      	cmp	r6, r4
 8004b14:	d105      	bne.n	8004b22 <__libc_init_array+0x2e>
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1c:	4798      	blx	r3
 8004b1e:	3601      	adds	r6, #1
 8004b20:	e7ee      	b.n	8004b00 <__libc_init_array+0xc>
 8004b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b26:	4798      	blx	r3
 8004b28:	3601      	adds	r6, #1
 8004b2a:	e7f2      	b.n	8004b12 <__libc_init_array+0x1e>
 8004b2c:	08005c64 	.word	0x08005c64
 8004b30:	08005c64 	.word	0x08005c64
 8004b34:	08005c64 	.word	0x08005c64
 8004b38:	08005c68 	.word	0x08005c68

08004b3c <__retarget_lock_acquire_recursive>:
 8004b3c:	4770      	bx	lr

08004b3e <__retarget_lock_release_recursive>:
 8004b3e:	4770      	bx	lr

08004b40 <__assert_func>:
 8004b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b42:	4614      	mov	r4, r2
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <__assert_func+0x2c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	68d8      	ldr	r0, [r3, #12]
 8004b4e:	b14c      	cbz	r4, 8004b64 <__assert_func+0x24>
 8004b50:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <__assert_func+0x30>)
 8004b52:	9100      	str	r1, [sp, #0]
 8004b54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b58:	4906      	ldr	r1, [pc, #24]	; (8004b74 <__assert_func+0x34>)
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	f000 fbf8 	bl	8005350 <fiprintf>
 8004b60:	f000 fc30 	bl	80053c4 <abort>
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <__assert_func+0x38>)
 8004b66:	461c      	mov	r4, r3
 8004b68:	e7f3      	b.n	8004b52 <__assert_func+0x12>
 8004b6a:	bf00      	nop
 8004b6c:	20000064 	.word	0x20000064
 8004b70:	08005bea 	.word	0x08005bea
 8004b74:	08005bf7 	.word	0x08005bf7
 8004b78:	08005c25 	.word	0x08005c25

08004b7c <_free_r>:
 8004b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b7e:	2900      	cmp	r1, #0
 8004b80:	d044      	beq.n	8004c0c <_free_r+0x90>
 8004b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b86:	9001      	str	r0, [sp, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b8e:	bfb8      	it	lt
 8004b90:	18e4      	addlt	r4, r4, r3
 8004b92:	f7ff fd31 	bl	80045f8 <__malloc_lock>
 8004b96:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <_free_r+0x94>)
 8004b98:	9801      	ldr	r0, [sp, #4]
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	b933      	cbnz	r3, 8004bac <_free_r+0x30>
 8004b9e:	6063      	str	r3, [r4, #4]
 8004ba0:	6014      	str	r4, [r2, #0]
 8004ba2:	b003      	add	sp, #12
 8004ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ba8:	f7ff bd2c 	b.w	8004604 <__malloc_unlock>
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	d908      	bls.n	8004bc2 <_free_r+0x46>
 8004bb0:	6825      	ldr	r5, [r4, #0]
 8004bb2:	1961      	adds	r1, r4, r5
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	bf01      	itttt	eq
 8004bb8:	6819      	ldreq	r1, [r3, #0]
 8004bba:	685b      	ldreq	r3, [r3, #4]
 8004bbc:	1949      	addeq	r1, r1, r5
 8004bbe:	6021      	streq	r1, [r4, #0]
 8004bc0:	e7ed      	b.n	8004b9e <_free_r+0x22>
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	b10b      	cbz	r3, 8004bcc <_free_r+0x50>
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	d9fa      	bls.n	8004bc2 <_free_r+0x46>
 8004bcc:	6811      	ldr	r1, [r2, #0]
 8004bce:	1855      	adds	r5, r2, r1
 8004bd0:	42a5      	cmp	r5, r4
 8004bd2:	d10b      	bne.n	8004bec <_free_r+0x70>
 8004bd4:	6824      	ldr	r4, [r4, #0]
 8004bd6:	4421      	add	r1, r4
 8004bd8:	1854      	adds	r4, r2, r1
 8004bda:	42a3      	cmp	r3, r4
 8004bdc:	6011      	str	r1, [r2, #0]
 8004bde:	d1e0      	bne.n	8004ba2 <_free_r+0x26>
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	6053      	str	r3, [r2, #4]
 8004be6:	440c      	add	r4, r1
 8004be8:	6014      	str	r4, [r2, #0]
 8004bea:	e7da      	b.n	8004ba2 <_free_r+0x26>
 8004bec:	d902      	bls.n	8004bf4 <_free_r+0x78>
 8004bee:	230c      	movs	r3, #12
 8004bf0:	6003      	str	r3, [r0, #0]
 8004bf2:	e7d6      	b.n	8004ba2 <_free_r+0x26>
 8004bf4:	6825      	ldr	r5, [r4, #0]
 8004bf6:	1961      	adds	r1, r4, r5
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	bf04      	itt	eq
 8004bfc:	6819      	ldreq	r1, [r3, #0]
 8004bfe:	685b      	ldreq	r3, [r3, #4]
 8004c00:	6063      	str	r3, [r4, #4]
 8004c02:	bf04      	itt	eq
 8004c04:	1949      	addeq	r1, r1, r5
 8004c06:	6021      	streq	r1, [r4, #0]
 8004c08:	6054      	str	r4, [r2, #4]
 8004c0a:	e7ca      	b.n	8004ba2 <_free_r+0x26>
 8004c0c:	b003      	add	sp, #12
 8004c0e:	bd30      	pop	{r4, r5, pc}
 8004c10:	2000013c 	.word	0x2000013c

08004c14 <malloc>:
 8004c14:	4b02      	ldr	r3, [pc, #8]	; (8004c20 <malloc+0xc>)
 8004c16:	4601      	mov	r1, r0
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	f7ff bc6d 	b.w	80044f8 <_malloc_r>
 8004c1e:	bf00      	nop
 8004c20:	20000064 	.word	0x20000064

08004c24 <__ssputs_r>:
 8004c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	688e      	ldr	r6, [r1, #8]
 8004c2a:	461f      	mov	r7, r3
 8004c2c:	42be      	cmp	r6, r7
 8004c2e:	680b      	ldr	r3, [r1, #0]
 8004c30:	4682      	mov	sl, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	4690      	mov	r8, r2
 8004c36:	d82c      	bhi.n	8004c92 <__ssputs_r+0x6e>
 8004c38:	898a      	ldrh	r2, [r1, #12]
 8004c3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c3e:	d026      	beq.n	8004c8e <__ssputs_r+0x6a>
 8004c40:	6965      	ldr	r5, [r4, #20]
 8004c42:	6909      	ldr	r1, [r1, #16]
 8004c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c48:	eba3 0901 	sub.w	r9, r3, r1
 8004c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c50:	1c7b      	adds	r3, r7, #1
 8004c52:	444b      	add	r3, r9
 8004c54:	106d      	asrs	r5, r5, #1
 8004c56:	429d      	cmp	r5, r3
 8004c58:	bf38      	it	cc
 8004c5a:	461d      	movcc	r5, r3
 8004c5c:	0553      	lsls	r3, r2, #21
 8004c5e:	d527      	bpl.n	8004cb0 <__ssputs_r+0x8c>
 8004c60:	4629      	mov	r1, r5
 8004c62:	f7ff fc49 	bl	80044f8 <_malloc_r>
 8004c66:	4606      	mov	r6, r0
 8004c68:	b360      	cbz	r0, 8004cc4 <__ssputs_r+0xa0>
 8004c6a:	6921      	ldr	r1, [r4, #16]
 8004c6c:	464a      	mov	r2, r9
 8004c6e:	f000 fb9b 	bl	80053a8 <memcpy>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7c:	81a3      	strh	r3, [r4, #12]
 8004c7e:	6126      	str	r6, [r4, #16]
 8004c80:	6165      	str	r5, [r4, #20]
 8004c82:	444e      	add	r6, r9
 8004c84:	eba5 0509 	sub.w	r5, r5, r9
 8004c88:	6026      	str	r6, [r4, #0]
 8004c8a:	60a5      	str	r5, [r4, #8]
 8004c8c:	463e      	mov	r6, r7
 8004c8e:	42be      	cmp	r6, r7
 8004c90:	d900      	bls.n	8004c94 <__ssputs_r+0x70>
 8004c92:	463e      	mov	r6, r7
 8004c94:	6820      	ldr	r0, [r4, #0]
 8004c96:	4632      	mov	r2, r6
 8004c98:	4641      	mov	r1, r8
 8004c9a:	f000 fb6b 	bl	8005374 <memmove>
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	1b9b      	subs	r3, r3, r6
 8004ca2:	60a3      	str	r3, [r4, #8]
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	4433      	add	r3, r6
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	2000      	movs	r0, #0
 8004cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb0:	462a      	mov	r2, r5
 8004cb2:	f000 fb8e 	bl	80053d2 <_realloc_r>
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d1e0      	bne.n	8004c7e <__ssputs_r+0x5a>
 8004cbc:	6921      	ldr	r1, [r4, #16]
 8004cbe:	4650      	mov	r0, sl
 8004cc0:	f7ff ff5c 	bl	8004b7c <_free_r>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	f8ca 3000 	str.w	r3, [sl]
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd6:	e7e9      	b.n	8004cac <__ssputs_r+0x88>

08004cd8 <_svfiprintf_r>:
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	4698      	mov	r8, r3
 8004cde:	898b      	ldrh	r3, [r1, #12]
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	b09d      	sub	sp, #116	; 0x74
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	460d      	mov	r5, r1
 8004ce8:	4614      	mov	r4, r2
 8004cea:	d50e      	bpl.n	8004d0a <_svfiprintf_r+0x32>
 8004cec:	690b      	ldr	r3, [r1, #16]
 8004cee:	b963      	cbnz	r3, 8004d0a <_svfiprintf_r+0x32>
 8004cf0:	2140      	movs	r1, #64	; 0x40
 8004cf2:	f7ff fc01 	bl	80044f8 <_malloc_r>
 8004cf6:	6028      	str	r0, [r5, #0]
 8004cf8:	6128      	str	r0, [r5, #16]
 8004cfa:	b920      	cbnz	r0, 8004d06 <_svfiprintf_r+0x2e>
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	e0d0      	b.n	8004ea8 <_svfiprintf_r+0x1d0>
 8004d06:	2340      	movs	r3, #64	; 0x40
 8004d08:	616b      	str	r3, [r5, #20]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d0e:	2320      	movs	r3, #32
 8004d10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d14:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d18:	2330      	movs	r3, #48	; 0x30
 8004d1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ec0 <_svfiprintf_r+0x1e8>
 8004d1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d22:	f04f 0901 	mov.w	r9, #1
 8004d26:	4623      	mov	r3, r4
 8004d28:	469a      	mov	sl, r3
 8004d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d2e:	b10a      	cbz	r2, 8004d34 <_svfiprintf_r+0x5c>
 8004d30:	2a25      	cmp	r2, #37	; 0x25
 8004d32:	d1f9      	bne.n	8004d28 <_svfiprintf_r+0x50>
 8004d34:	ebba 0b04 	subs.w	fp, sl, r4
 8004d38:	d00b      	beq.n	8004d52 <_svfiprintf_r+0x7a>
 8004d3a:	465b      	mov	r3, fp
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4638      	mov	r0, r7
 8004d42:	f7ff ff6f 	bl	8004c24 <__ssputs_r>
 8004d46:	3001      	adds	r0, #1
 8004d48:	f000 80a9 	beq.w	8004e9e <_svfiprintf_r+0x1c6>
 8004d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d4e:	445a      	add	r2, fp
 8004d50:	9209      	str	r2, [sp, #36]	; 0x24
 8004d52:	f89a 3000 	ldrb.w	r3, [sl]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80a1 	beq.w	8004e9e <_svfiprintf_r+0x1c6>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d66:	f10a 0a01 	add.w	sl, sl, #1
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	9307      	str	r3, [sp, #28]
 8004d6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d72:	931a      	str	r3, [sp, #104]	; 0x68
 8004d74:	4654      	mov	r4, sl
 8004d76:	2205      	movs	r2, #5
 8004d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d7c:	4850      	ldr	r0, [pc, #320]	; (8004ec0 <_svfiprintf_r+0x1e8>)
 8004d7e:	f7fb fa47 	bl	8000210 <memchr>
 8004d82:	9a04      	ldr	r2, [sp, #16]
 8004d84:	b9d8      	cbnz	r0, 8004dbe <_svfiprintf_r+0xe6>
 8004d86:	06d0      	lsls	r0, r2, #27
 8004d88:	bf44      	itt	mi
 8004d8a:	2320      	movmi	r3, #32
 8004d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d90:	0711      	lsls	r1, r2, #28
 8004d92:	bf44      	itt	mi
 8004d94:	232b      	movmi	r3, #43	; 0x2b
 8004d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004da0:	d015      	beq.n	8004dce <_svfiprintf_r+0xf6>
 8004da2:	9a07      	ldr	r2, [sp, #28]
 8004da4:	4654      	mov	r4, sl
 8004da6:	2000      	movs	r0, #0
 8004da8:	f04f 0c0a 	mov.w	ip, #10
 8004dac:	4621      	mov	r1, r4
 8004dae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004db2:	3b30      	subs	r3, #48	; 0x30
 8004db4:	2b09      	cmp	r3, #9
 8004db6:	d94d      	bls.n	8004e54 <_svfiprintf_r+0x17c>
 8004db8:	b1b0      	cbz	r0, 8004de8 <_svfiprintf_r+0x110>
 8004dba:	9207      	str	r2, [sp, #28]
 8004dbc:	e014      	b.n	8004de8 <_svfiprintf_r+0x110>
 8004dbe:	eba0 0308 	sub.w	r3, r0, r8
 8004dc2:	fa09 f303 	lsl.w	r3, r9, r3
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	9304      	str	r3, [sp, #16]
 8004dca:	46a2      	mov	sl, r4
 8004dcc:	e7d2      	b.n	8004d74 <_svfiprintf_r+0x9c>
 8004dce:	9b03      	ldr	r3, [sp, #12]
 8004dd0:	1d19      	adds	r1, r3, #4
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	9103      	str	r1, [sp, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bfbb      	ittet	lt
 8004dda:	425b      	neglt	r3, r3
 8004ddc:	f042 0202 	orrlt.w	r2, r2, #2
 8004de0:	9307      	strge	r3, [sp, #28]
 8004de2:	9307      	strlt	r3, [sp, #28]
 8004de4:	bfb8      	it	lt
 8004de6:	9204      	strlt	r2, [sp, #16]
 8004de8:	7823      	ldrb	r3, [r4, #0]
 8004dea:	2b2e      	cmp	r3, #46	; 0x2e
 8004dec:	d10c      	bne.n	8004e08 <_svfiprintf_r+0x130>
 8004dee:	7863      	ldrb	r3, [r4, #1]
 8004df0:	2b2a      	cmp	r3, #42	; 0x2a
 8004df2:	d134      	bne.n	8004e5e <_svfiprintf_r+0x186>
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	1d1a      	adds	r2, r3, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	9203      	str	r2, [sp, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bfb8      	it	lt
 8004e00:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e04:	3402      	adds	r4, #2
 8004e06:	9305      	str	r3, [sp, #20]
 8004e08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ed0 <_svfiprintf_r+0x1f8>
 8004e0c:	7821      	ldrb	r1, [r4, #0]
 8004e0e:	2203      	movs	r2, #3
 8004e10:	4650      	mov	r0, sl
 8004e12:	f7fb f9fd 	bl	8000210 <memchr>
 8004e16:	b138      	cbz	r0, 8004e28 <_svfiprintf_r+0x150>
 8004e18:	9b04      	ldr	r3, [sp, #16]
 8004e1a:	eba0 000a 	sub.w	r0, r0, sl
 8004e1e:	2240      	movs	r2, #64	; 0x40
 8004e20:	4082      	lsls	r2, r0
 8004e22:	4313      	orrs	r3, r2
 8004e24:	3401      	adds	r4, #1
 8004e26:	9304      	str	r3, [sp, #16]
 8004e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e2c:	4825      	ldr	r0, [pc, #148]	; (8004ec4 <_svfiprintf_r+0x1ec>)
 8004e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e32:	2206      	movs	r2, #6
 8004e34:	f7fb f9ec 	bl	8000210 <memchr>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d038      	beq.n	8004eae <_svfiprintf_r+0x1d6>
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <_svfiprintf_r+0x1f0>)
 8004e3e:	bb1b      	cbnz	r3, 8004e88 <_svfiprintf_r+0x1b0>
 8004e40:	9b03      	ldr	r3, [sp, #12]
 8004e42:	3307      	adds	r3, #7
 8004e44:	f023 0307 	bic.w	r3, r3, #7
 8004e48:	3308      	adds	r3, #8
 8004e4a:	9303      	str	r3, [sp, #12]
 8004e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4e:	4433      	add	r3, r6
 8004e50:	9309      	str	r3, [sp, #36]	; 0x24
 8004e52:	e768      	b.n	8004d26 <_svfiprintf_r+0x4e>
 8004e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e58:	460c      	mov	r4, r1
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	e7a6      	b.n	8004dac <_svfiprintf_r+0xd4>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	3401      	adds	r4, #1
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	4619      	mov	r1, r3
 8004e66:	f04f 0c0a 	mov.w	ip, #10
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e70:	3a30      	subs	r2, #48	; 0x30
 8004e72:	2a09      	cmp	r2, #9
 8004e74:	d903      	bls.n	8004e7e <_svfiprintf_r+0x1a6>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0c6      	beq.n	8004e08 <_svfiprintf_r+0x130>
 8004e7a:	9105      	str	r1, [sp, #20]
 8004e7c:	e7c4      	b.n	8004e08 <_svfiprintf_r+0x130>
 8004e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e82:	4604      	mov	r4, r0
 8004e84:	2301      	movs	r3, #1
 8004e86:	e7f0      	b.n	8004e6a <_svfiprintf_r+0x192>
 8004e88:	ab03      	add	r3, sp, #12
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	462a      	mov	r2, r5
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <_svfiprintf_r+0x1f4>)
 8004e90:	a904      	add	r1, sp, #16
 8004e92:	4638      	mov	r0, r7
 8004e94:	f3af 8000 	nop.w
 8004e98:	1c42      	adds	r2, r0, #1
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	d1d6      	bne.n	8004e4c <_svfiprintf_r+0x174>
 8004e9e:	89ab      	ldrh	r3, [r5, #12]
 8004ea0:	065b      	lsls	r3, r3, #25
 8004ea2:	f53f af2d 	bmi.w	8004d00 <_svfiprintf_r+0x28>
 8004ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea8:	b01d      	add	sp, #116	; 0x74
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	ab03      	add	r3, sp, #12
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	462a      	mov	r2, r5
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <_svfiprintf_r+0x1f4>)
 8004eb6:	a904      	add	r1, sp, #16
 8004eb8:	4638      	mov	r0, r7
 8004eba:	f000 f879 	bl	8004fb0 <_printf_i>
 8004ebe:	e7eb      	b.n	8004e98 <_svfiprintf_r+0x1c0>
 8004ec0:	08005c26 	.word	0x08005c26
 8004ec4:	08005c30 	.word	0x08005c30
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	08004c25 	.word	0x08004c25
 8004ed0:	08005c2c 	.word	0x08005c2c

08004ed4 <_printf_common>:
 8004ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed8:	4616      	mov	r6, r2
 8004eda:	4699      	mov	r9, r3
 8004edc:	688a      	ldr	r2, [r1, #8]
 8004ede:	690b      	ldr	r3, [r1, #16]
 8004ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	bfb8      	it	lt
 8004ee8:	4613      	movlt	r3, r2
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	b10a      	cbz	r2, 8004efa <_printf_common+0x26>
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	6033      	str	r3, [r6, #0]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	0699      	lsls	r1, r3, #26
 8004efe:	bf42      	ittt	mi
 8004f00:	6833      	ldrmi	r3, [r6, #0]
 8004f02:	3302      	addmi	r3, #2
 8004f04:	6033      	strmi	r3, [r6, #0]
 8004f06:	6825      	ldr	r5, [r4, #0]
 8004f08:	f015 0506 	ands.w	r5, r5, #6
 8004f0c:	d106      	bne.n	8004f1c <_printf_common+0x48>
 8004f0e:	f104 0a19 	add.w	sl, r4, #25
 8004f12:	68e3      	ldr	r3, [r4, #12]
 8004f14:	6832      	ldr	r2, [r6, #0]
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	42ab      	cmp	r3, r5
 8004f1a:	dc26      	bgt.n	8004f6a <_printf_common+0x96>
 8004f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f20:	1e13      	subs	r3, r2, #0
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	bf18      	it	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	0692      	lsls	r2, r2, #26
 8004f2a:	d42b      	bmi.n	8004f84 <_printf_common+0xb0>
 8004f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f30:	4649      	mov	r1, r9
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c0      	blx	r8
 8004f36:	3001      	adds	r0, #1
 8004f38:	d01e      	beq.n	8004f78 <_printf_common+0xa4>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	6922      	ldr	r2, [r4, #16]
 8004f3e:	f003 0306 	and.w	r3, r3, #6
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	bf02      	ittt	eq
 8004f46:	68e5      	ldreq	r5, [r4, #12]
 8004f48:	6833      	ldreq	r3, [r6, #0]
 8004f4a:	1aed      	subeq	r5, r5, r3
 8004f4c:	68a3      	ldr	r3, [r4, #8]
 8004f4e:	bf0c      	ite	eq
 8004f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f54:	2500      	movne	r5, #0
 8004f56:	4293      	cmp	r3, r2
 8004f58:	bfc4      	itt	gt
 8004f5a:	1a9b      	subgt	r3, r3, r2
 8004f5c:	18ed      	addgt	r5, r5, r3
 8004f5e:	2600      	movs	r6, #0
 8004f60:	341a      	adds	r4, #26
 8004f62:	42b5      	cmp	r5, r6
 8004f64:	d11a      	bne.n	8004f9c <_printf_common+0xc8>
 8004f66:	2000      	movs	r0, #0
 8004f68:	e008      	b.n	8004f7c <_printf_common+0xa8>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	4649      	mov	r1, r9
 8004f70:	4638      	mov	r0, r7
 8004f72:	47c0      	blx	r8
 8004f74:	3001      	adds	r0, #1
 8004f76:	d103      	bne.n	8004f80 <_printf_common+0xac>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f80:	3501      	adds	r5, #1
 8004f82:	e7c6      	b.n	8004f12 <_printf_common+0x3e>
 8004f84:	18e1      	adds	r1, r4, r3
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	2030      	movs	r0, #48	; 0x30
 8004f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f8e:	4422      	add	r2, r4
 8004f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f98:	3302      	adds	r3, #2
 8004f9a:	e7c7      	b.n	8004f2c <_printf_common+0x58>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	47c0      	blx	r8
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d0e6      	beq.n	8004f78 <_printf_common+0xa4>
 8004faa:	3601      	adds	r6, #1
 8004fac:	e7d9      	b.n	8004f62 <_printf_common+0x8e>
	...

08004fb0 <_printf_i>:
 8004fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb4:	7e0f      	ldrb	r7, [r1, #24]
 8004fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fb8:	2f78      	cmp	r7, #120	; 0x78
 8004fba:	4691      	mov	r9, r2
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	469a      	mov	sl, r3
 8004fc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fc6:	d807      	bhi.n	8004fd8 <_printf_i+0x28>
 8004fc8:	2f62      	cmp	r7, #98	; 0x62
 8004fca:	d80a      	bhi.n	8004fe2 <_printf_i+0x32>
 8004fcc:	2f00      	cmp	r7, #0
 8004fce:	f000 80d4 	beq.w	800517a <_printf_i+0x1ca>
 8004fd2:	2f58      	cmp	r7, #88	; 0x58
 8004fd4:	f000 80c0 	beq.w	8005158 <_printf_i+0x1a8>
 8004fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fe0:	e03a      	b.n	8005058 <_printf_i+0xa8>
 8004fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fe6:	2b15      	cmp	r3, #21
 8004fe8:	d8f6      	bhi.n	8004fd8 <_printf_i+0x28>
 8004fea:	a101      	add	r1, pc, #4	; (adr r1, 8004ff0 <_printf_i+0x40>)
 8004fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff0:	08005049 	.word	0x08005049
 8004ff4:	0800505d 	.word	0x0800505d
 8004ff8:	08004fd9 	.word	0x08004fd9
 8004ffc:	08004fd9 	.word	0x08004fd9
 8005000:	08004fd9 	.word	0x08004fd9
 8005004:	08004fd9 	.word	0x08004fd9
 8005008:	0800505d 	.word	0x0800505d
 800500c:	08004fd9 	.word	0x08004fd9
 8005010:	08004fd9 	.word	0x08004fd9
 8005014:	08004fd9 	.word	0x08004fd9
 8005018:	08004fd9 	.word	0x08004fd9
 800501c:	08005161 	.word	0x08005161
 8005020:	08005089 	.word	0x08005089
 8005024:	0800511b 	.word	0x0800511b
 8005028:	08004fd9 	.word	0x08004fd9
 800502c:	08004fd9 	.word	0x08004fd9
 8005030:	08005183 	.word	0x08005183
 8005034:	08004fd9 	.word	0x08004fd9
 8005038:	08005089 	.word	0x08005089
 800503c:	08004fd9 	.word	0x08004fd9
 8005040:	08004fd9 	.word	0x08004fd9
 8005044:	08005123 	.word	0x08005123
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	1d1a      	adds	r2, r3, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	602a      	str	r2, [r5, #0]
 8005050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005058:	2301      	movs	r3, #1
 800505a:	e09f      	b.n	800519c <_printf_i+0x1ec>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	682b      	ldr	r3, [r5, #0]
 8005060:	0607      	lsls	r7, r0, #24
 8005062:	f103 0104 	add.w	r1, r3, #4
 8005066:	6029      	str	r1, [r5, #0]
 8005068:	d501      	bpl.n	800506e <_printf_i+0xbe>
 800506a:	681e      	ldr	r6, [r3, #0]
 800506c:	e003      	b.n	8005076 <_printf_i+0xc6>
 800506e:	0646      	lsls	r6, r0, #25
 8005070:	d5fb      	bpl.n	800506a <_printf_i+0xba>
 8005072:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005076:	2e00      	cmp	r6, #0
 8005078:	da03      	bge.n	8005082 <_printf_i+0xd2>
 800507a:	232d      	movs	r3, #45	; 0x2d
 800507c:	4276      	negs	r6, r6
 800507e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005082:	485a      	ldr	r0, [pc, #360]	; (80051ec <_printf_i+0x23c>)
 8005084:	230a      	movs	r3, #10
 8005086:	e012      	b.n	80050ae <_printf_i+0xfe>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	1d19      	adds	r1, r3, #4
 800508e:	6029      	str	r1, [r5, #0]
 8005090:	0605      	lsls	r5, r0, #24
 8005092:	d501      	bpl.n	8005098 <_printf_i+0xe8>
 8005094:	681e      	ldr	r6, [r3, #0]
 8005096:	e002      	b.n	800509e <_printf_i+0xee>
 8005098:	0641      	lsls	r1, r0, #25
 800509a:	d5fb      	bpl.n	8005094 <_printf_i+0xe4>
 800509c:	881e      	ldrh	r6, [r3, #0]
 800509e:	4853      	ldr	r0, [pc, #332]	; (80051ec <_printf_i+0x23c>)
 80050a0:	2f6f      	cmp	r7, #111	; 0x6f
 80050a2:	bf0c      	ite	eq
 80050a4:	2308      	moveq	r3, #8
 80050a6:	230a      	movne	r3, #10
 80050a8:	2100      	movs	r1, #0
 80050aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ae:	6865      	ldr	r5, [r4, #4]
 80050b0:	60a5      	str	r5, [r4, #8]
 80050b2:	2d00      	cmp	r5, #0
 80050b4:	bfa2      	ittt	ge
 80050b6:	6821      	ldrge	r1, [r4, #0]
 80050b8:	f021 0104 	bicge.w	r1, r1, #4
 80050bc:	6021      	strge	r1, [r4, #0]
 80050be:	b90e      	cbnz	r6, 80050c4 <_printf_i+0x114>
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	d04b      	beq.n	800515c <_printf_i+0x1ac>
 80050c4:	4615      	mov	r5, r2
 80050c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ca:	fb03 6711 	mls	r7, r3, r1, r6
 80050ce:	5dc7      	ldrb	r7, [r0, r7]
 80050d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050d4:	4637      	mov	r7, r6
 80050d6:	42bb      	cmp	r3, r7
 80050d8:	460e      	mov	r6, r1
 80050da:	d9f4      	bls.n	80050c6 <_printf_i+0x116>
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d10b      	bne.n	80050f8 <_printf_i+0x148>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	07de      	lsls	r6, r3, #31
 80050e4:	d508      	bpl.n	80050f8 <_printf_i+0x148>
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	6861      	ldr	r1, [r4, #4]
 80050ea:	4299      	cmp	r1, r3
 80050ec:	bfde      	ittt	le
 80050ee:	2330      	movle	r3, #48	; 0x30
 80050f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050f8:	1b52      	subs	r2, r2, r5
 80050fa:	6122      	str	r2, [r4, #16]
 80050fc:	f8cd a000 	str.w	sl, [sp]
 8005100:	464b      	mov	r3, r9
 8005102:	aa03      	add	r2, sp, #12
 8005104:	4621      	mov	r1, r4
 8005106:	4640      	mov	r0, r8
 8005108:	f7ff fee4 	bl	8004ed4 <_printf_common>
 800510c:	3001      	adds	r0, #1
 800510e:	d14a      	bne.n	80051a6 <_printf_i+0x1f6>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	b004      	add	sp, #16
 8005116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	f043 0320 	orr.w	r3, r3, #32
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	4833      	ldr	r0, [pc, #204]	; (80051f0 <_printf_i+0x240>)
 8005124:	2778      	movs	r7, #120	; 0x78
 8005126:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	6829      	ldr	r1, [r5, #0]
 800512e:	061f      	lsls	r7, r3, #24
 8005130:	f851 6b04 	ldr.w	r6, [r1], #4
 8005134:	d402      	bmi.n	800513c <_printf_i+0x18c>
 8005136:	065f      	lsls	r7, r3, #25
 8005138:	bf48      	it	mi
 800513a:	b2b6      	uxthmi	r6, r6
 800513c:	07df      	lsls	r7, r3, #31
 800513e:	bf48      	it	mi
 8005140:	f043 0320 	orrmi.w	r3, r3, #32
 8005144:	6029      	str	r1, [r5, #0]
 8005146:	bf48      	it	mi
 8005148:	6023      	strmi	r3, [r4, #0]
 800514a:	b91e      	cbnz	r6, 8005154 <_printf_i+0x1a4>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	f023 0320 	bic.w	r3, r3, #32
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	2310      	movs	r3, #16
 8005156:	e7a7      	b.n	80050a8 <_printf_i+0xf8>
 8005158:	4824      	ldr	r0, [pc, #144]	; (80051ec <_printf_i+0x23c>)
 800515a:	e7e4      	b.n	8005126 <_printf_i+0x176>
 800515c:	4615      	mov	r5, r2
 800515e:	e7bd      	b.n	80050dc <_printf_i+0x12c>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	6826      	ldr	r6, [r4, #0]
 8005164:	6961      	ldr	r1, [r4, #20]
 8005166:	1d18      	adds	r0, r3, #4
 8005168:	6028      	str	r0, [r5, #0]
 800516a:	0635      	lsls	r5, r6, #24
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	d501      	bpl.n	8005174 <_printf_i+0x1c4>
 8005170:	6019      	str	r1, [r3, #0]
 8005172:	e002      	b.n	800517a <_printf_i+0x1ca>
 8005174:	0670      	lsls	r0, r6, #25
 8005176:	d5fb      	bpl.n	8005170 <_printf_i+0x1c0>
 8005178:	8019      	strh	r1, [r3, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	6123      	str	r3, [r4, #16]
 800517e:	4615      	mov	r5, r2
 8005180:	e7bc      	b.n	80050fc <_printf_i+0x14c>
 8005182:	682b      	ldr	r3, [r5, #0]
 8005184:	1d1a      	adds	r2, r3, #4
 8005186:	602a      	str	r2, [r5, #0]
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	2100      	movs	r1, #0
 800518e:	4628      	mov	r0, r5
 8005190:	f7fb f83e 	bl	8000210 <memchr>
 8005194:	b108      	cbz	r0, 800519a <_printf_i+0x1ea>
 8005196:	1b40      	subs	r0, r0, r5
 8005198:	6060      	str	r0, [r4, #4]
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	2300      	movs	r3, #0
 80051a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a4:	e7aa      	b.n	80050fc <_printf_i+0x14c>
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	462a      	mov	r2, r5
 80051aa:	4649      	mov	r1, r9
 80051ac:	4640      	mov	r0, r8
 80051ae:	47d0      	blx	sl
 80051b0:	3001      	adds	r0, #1
 80051b2:	d0ad      	beq.n	8005110 <_printf_i+0x160>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	079b      	lsls	r3, r3, #30
 80051b8:	d413      	bmi.n	80051e2 <_printf_i+0x232>
 80051ba:	68e0      	ldr	r0, [r4, #12]
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	4298      	cmp	r0, r3
 80051c0:	bfb8      	it	lt
 80051c2:	4618      	movlt	r0, r3
 80051c4:	e7a6      	b.n	8005114 <_printf_i+0x164>
 80051c6:	2301      	movs	r3, #1
 80051c8:	4632      	mov	r2, r6
 80051ca:	4649      	mov	r1, r9
 80051cc:	4640      	mov	r0, r8
 80051ce:	47d0      	blx	sl
 80051d0:	3001      	adds	r0, #1
 80051d2:	d09d      	beq.n	8005110 <_printf_i+0x160>
 80051d4:	3501      	adds	r5, #1
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	9903      	ldr	r1, [sp, #12]
 80051da:	1a5b      	subs	r3, r3, r1
 80051dc:	42ab      	cmp	r3, r5
 80051de:	dcf2      	bgt.n	80051c6 <_printf_i+0x216>
 80051e0:	e7eb      	b.n	80051ba <_printf_i+0x20a>
 80051e2:	2500      	movs	r5, #0
 80051e4:	f104 0619 	add.w	r6, r4, #25
 80051e8:	e7f5      	b.n	80051d6 <_printf_i+0x226>
 80051ea:	bf00      	nop
 80051ec:	08005c37 	.word	0x08005c37
 80051f0:	08005c48 	.word	0x08005c48

080051f4 <__sflush_r>:
 80051f4:	898a      	ldrh	r2, [r1, #12]
 80051f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fa:	4605      	mov	r5, r0
 80051fc:	0710      	lsls	r0, r2, #28
 80051fe:	460c      	mov	r4, r1
 8005200:	d458      	bmi.n	80052b4 <__sflush_r+0xc0>
 8005202:	684b      	ldr	r3, [r1, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	dc05      	bgt.n	8005214 <__sflush_r+0x20>
 8005208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	dc02      	bgt.n	8005214 <__sflush_r+0x20>
 800520e:	2000      	movs	r0, #0
 8005210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005216:	2e00      	cmp	r6, #0
 8005218:	d0f9      	beq.n	800520e <__sflush_r+0x1a>
 800521a:	2300      	movs	r3, #0
 800521c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005220:	682f      	ldr	r7, [r5, #0]
 8005222:	6a21      	ldr	r1, [r4, #32]
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	d032      	beq.n	800528e <__sflush_r+0x9a>
 8005228:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	075a      	lsls	r2, r3, #29
 800522e:	d505      	bpl.n	800523c <__sflush_r+0x48>
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	1ac0      	subs	r0, r0, r3
 8005234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005236:	b10b      	cbz	r3, 800523c <__sflush_r+0x48>
 8005238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800523a:	1ac0      	subs	r0, r0, r3
 800523c:	2300      	movs	r3, #0
 800523e:	4602      	mov	r2, r0
 8005240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005242:	6a21      	ldr	r1, [r4, #32]
 8005244:	4628      	mov	r0, r5
 8005246:	47b0      	blx	r6
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	d106      	bne.n	800525c <__sflush_r+0x68>
 800524e:	6829      	ldr	r1, [r5, #0]
 8005250:	291d      	cmp	r1, #29
 8005252:	d82b      	bhi.n	80052ac <__sflush_r+0xb8>
 8005254:	4a29      	ldr	r2, [pc, #164]	; (80052fc <__sflush_r+0x108>)
 8005256:	410a      	asrs	r2, r1
 8005258:	07d6      	lsls	r6, r2, #31
 800525a:	d427      	bmi.n	80052ac <__sflush_r+0xb8>
 800525c:	2200      	movs	r2, #0
 800525e:	6062      	str	r2, [r4, #4]
 8005260:	04d9      	lsls	r1, r3, #19
 8005262:	6922      	ldr	r2, [r4, #16]
 8005264:	6022      	str	r2, [r4, #0]
 8005266:	d504      	bpl.n	8005272 <__sflush_r+0x7e>
 8005268:	1c42      	adds	r2, r0, #1
 800526a:	d101      	bne.n	8005270 <__sflush_r+0x7c>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b903      	cbnz	r3, 8005272 <__sflush_r+0x7e>
 8005270:	6560      	str	r0, [r4, #84]	; 0x54
 8005272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005274:	602f      	str	r7, [r5, #0]
 8005276:	2900      	cmp	r1, #0
 8005278:	d0c9      	beq.n	800520e <__sflush_r+0x1a>
 800527a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800527e:	4299      	cmp	r1, r3
 8005280:	d002      	beq.n	8005288 <__sflush_r+0x94>
 8005282:	4628      	mov	r0, r5
 8005284:	f7ff fc7a 	bl	8004b7c <_free_r>
 8005288:	2000      	movs	r0, #0
 800528a:	6360      	str	r0, [r4, #52]	; 0x34
 800528c:	e7c0      	b.n	8005210 <__sflush_r+0x1c>
 800528e:	2301      	movs	r3, #1
 8005290:	4628      	mov	r0, r5
 8005292:	47b0      	blx	r6
 8005294:	1c41      	adds	r1, r0, #1
 8005296:	d1c8      	bne.n	800522a <__sflush_r+0x36>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0c5      	beq.n	800522a <__sflush_r+0x36>
 800529e:	2b1d      	cmp	r3, #29
 80052a0:	d001      	beq.n	80052a6 <__sflush_r+0xb2>
 80052a2:	2b16      	cmp	r3, #22
 80052a4:	d101      	bne.n	80052aa <__sflush_r+0xb6>
 80052a6:	602f      	str	r7, [r5, #0]
 80052a8:	e7b1      	b.n	800520e <__sflush_r+0x1a>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	e7ad      	b.n	8005210 <__sflush_r+0x1c>
 80052b4:	690f      	ldr	r7, [r1, #16]
 80052b6:	2f00      	cmp	r7, #0
 80052b8:	d0a9      	beq.n	800520e <__sflush_r+0x1a>
 80052ba:	0793      	lsls	r3, r2, #30
 80052bc:	680e      	ldr	r6, [r1, #0]
 80052be:	bf08      	it	eq
 80052c0:	694b      	ldreq	r3, [r1, #20]
 80052c2:	600f      	str	r7, [r1, #0]
 80052c4:	bf18      	it	ne
 80052c6:	2300      	movne	r3, #0
 80052c8:	eba6 0807 	sub.w	r8, r6, r7
 80052cc:	608b      	str	r3, [r1, #8]
 80052ce:	f1b8 0f00 	cmp.w	r8, #0
 80052d2:	dd9c      	ble.n	800520e <__sflush_r+0x1a>
 80052d4:	6a21      	ldr	r1, [r4, #32]
 80052d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052d8:	4643      	mov	r3, r8
 80052da:	463a      	mov	r2, r7
 80052dc:	4628      	mov	r0, r5
 80052de:	47b0      	blx	r6
 80052e0:	2800      	cmp	r0, #0
 80052e2:	dc06      	bgt.n	80052f2 <__sflush_r+0xfe>
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	e78e      	b.n	8005210 <__sflush_r+0x1c>
 80052f2:	4407      	add	r7, r0
 80052f4:	eba8 0800 	sub.w	r8, r8, r0
 80052f8:	e7e9      	b.n	80052ce <__sflush_r+0xda>
 80052fa:	bf00      	nop
 80052fc:	dfbffffe 	.word	0xdfbffffe

08005300 <_fflush_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	690b      	ldr	r3, [r1, #16]
 8005304:	4605      	mov	r5, r0
 8005306:	460c      	mov	r4, r1
 8005308:	b913      	cbnz	r3, 8005310 <_fflush_r+0x10>
 800530a:	2500      	movs	r5, #0
 800530c:	4628      	mov	r0, r5
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	b118      	cbz	r0, 800531a <_fflush_r+0x1a>
 8005312:	6a03      	ldr	r3, [r0, #32]
 8005314:	b90b      	cbnz	r3, 800531a <_fflush_r+0x1a>
 8005316:	f7ff fa81 	bl	800481c <__sinit>
 800531a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f3      	beq.n	800530a <_fflush_r+0xa>
 8005322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005324:	07d0      	lsls	r0, r2, #31
 8005326:	d404      	bmi.n	8005332 <_fflush_r+0x32>
 8005328:	0599      	lsls	r1, r3, #22
 800532a:	d402      	bmi.n	8005332 <_fflush_r+0x32>
 800532c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800532e:	f7ff fc05 	bl	8004b3c <__retarget_lock_acquire_recursive>
 8005332:	4628      	mov	r0, r5
 8005334:	4621      	mov	r1, r4
 8005336:	f7ff ff5d 	bl	80051f4 <__sflush_r>
 800533a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800533c:	07da      	lsls	r2, r3, #31
 800533e:	4605      	mov	r5, r0
 8005340:	d4e4      	bmi.n	800530c <_fflush_r+0xc>
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	059b      	lsls	r3, r3, #22
 8005346:	d4e1      	bmi.n	800530c <_fflush_r+0xc>
 8005348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800534a:	f7ff fbf8 	bl	8004b3e <__retarget_lock_release_recursive>
 800534e:	e7dd      	b.n	800530c <_fflush_r+0xc>

08005350 <fiprintf>:
 8005350:	b40e      	push	{r1, r2, r3}
 8005352:	b503      	push	{r0, r1, lr}
 8005354:	4601      	mov	r1, r0
 8005356:	ab03      	add	r3, sp, #12
 8005358:	4805      	ldr	r0, [pc, #20]	; (8005370 <fiprintf+0x20>)
 800535a:	f853 2b04 	ldr.w	r2, [r3], #4
 800535e:	6800      	ldr	r0, [r0, #0]
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	f000 f88f 	bl	8005484 <_vfiprintf_r>
 8005366:	b002      	add	sp, #8
 8005368:	f85d eb04 	ldr.w	lr, [sp], #4
 800536c:	b003      	add	sp, #12
 800536e:	4770      	bx	lr
 8005370:	20000064 	.word	0x20000064

08005374 <memmove>:
 8005374:	4288      	cmp	r0, r1
 8005376:	b510      	push	{r4, lr}
 8005378:	eb01 0402 	add.w	r4, r1, r2
 800537c:	d902      	bls.n	8005384 <memmove+0x10>
 800537e:	4284      	cmp	r4, r0
 8005380:	4623      	mov	r3, r4
 8005382:	d807      	bhi.n	8005394 <memmove+0x20>
 8005384:	1e43      	subs	r3, r0, #1
 8005386:	42a1      	cmp	r1, r4
 8005388:	d008      	beq.n	800539c <memmove+0x28>
 800538a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800538e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005392:	e7f8      	b.n	8005386 <memmove+0x12>
 8005394:	4402      	add	r2, r0
 8005396:	4601      	mov	r1, r0
 8005398:	428a      	cmp	r2, r1
 800539a:	d100      	bne.n	800539e <memmove+0x2a>
 800539c:	bd10      	pop	{r4, pc}
 800539e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053a6:	e7f7      	b.n	8005398 <memmove+0x24>

080053a8 <memcpy>:
 80053a8:	440a      	add	r2, r1
 80053aa:	4291      	cmp	r1, r2
 80053ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80053b0:	d100      	bne.n	80053b4 <memcpy+0xc>
 80053b2:	4770      	bx	lr
 80053b4:	b510      	push	{r4, lr}
 80053b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053be:	4291      	cmp	r1, r2
 80053c0:	d1f9      	bne.n	80053b6 <memcpy+0xe>
 80053c2:	bd10      	pop	{r4, pc}

080053c4 <abort>:
 80053c4:	b508      	push	{r3, lr}
 80053c6:	2006      	movs	r0, #6
 80053c8:	f000 fa34 	bl	8005834 <raise>
 80053cc:	2001      	movs	r0, #1
 80053ce:	f7fc f865 	bl	800149c <_exit>

080053d2 <_realloc_r>:
 80053d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d6:	4680      	mov	r8, r0
 80053d8:	4614      	mov	r4, r2
 80053da:	460e      	mov	r6, r1
 80053dc:	b921      	cbnz	r1, 80053e8 <_realloc_r+0x16>
 80053de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053e2:	4611      	mov	r1, r2
 80053e4:	f7ff b888 	b.w	80044f8 <_malloc_r>
 80053e8:	b92a      	cbnz	r2, 80053f6 <_realloc_r+0x24>
 80053ea:	f7ff fbc7 	bl	8004b7c <_free_r>
 80053ee:	4625      	mov	r5, r4
 80053f0:	4628      	mov	r0, r5
 80053f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f6:	f000 fa39 	bl	800586c <_malloc_usable_size_r>
 80053fa:	4284      	cmp	r4, r0
 80053fc:	4607      	mov	r7, r0
 80053fe:	d802      	bhi.n	8005406 <_realloc_r+0x34>
 8005400:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005404:	d812      	bhi.n	800542c <_realloc_r+0x5a>
 8005406:	4621      	mov	r1, r4
 8005408:	4640      	mov	r0, r8
 800540a:	f7ff f875 	bl	80044f8 <_malloc_r>
 800540e:	4605      	mov	r5, r0
 8005410:	2800      	cmp	r0, #0
 8005412:	d0ed      	beq.n	80053f0 <_realloc_r+0x1e>
 8005414:	42bc      	cmp	r4, r7
 8005416:	4622      	mov	r2, r4
 8005418:	4631      	mov	r1, r6
 800541a:	bf28      	it	cs
 800541c:	463a      	movcs	r2, r7
 800541e:	f7ff ffc3 	bl	80053a8 <memcpy>
 8005422:	4631      	mov	r1, r6
 8005424:	4640      	mov	r0, r8
 8005426:	f7ff fba9 	bl	8004b7c <_free_r>
 800542a:	e7e1      	b.n	80053f0 <_realloc_r+0x1e>
 800542c:	4635      	mov	r5, r6
 800542e:	e7df      	b.n	80053f0 <_realloc_r+0x1e>

08005430 <__sfputc_r>:
 8005430:	6893      	ldr	r3, [r2, #8]
 8005432:	3b01      	subs	r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	b410      	push	{r4}
 8005438:	6093      	str	r3, [r2, #8]
 800543a:	da08      	bge.n	800544e <__sfputc_r+0x1e>
 800543c:	6994      	ldr	r4, [r2, #24]
 800543e:	42a3      	cmp	r3, r4
 8005440:	db01      	blt.n	8005446 <__sfputc_r+0x16>
 8005442:	290a      	cmp	r1, #10
 8005444:	d103      	bne.n	800544e <__sfputc_r+0x1e>
 8005446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800544a:	f000 b935 	b.w	80056b8 <__swbuf_r>
 800544e:	6813      	ldr	r3, [r2, #0]
 8005450:	1c58      	adds	r0, r3, #1
 8005452:	6010      	str	r0, [r2, #0]
 8005454:	7019      	strb	r1, [r3, #0]
 8005456:	4608      	mov	r0, r1
 8005458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800545c:	4770      	bx	lr

0800545e <__sfputs_r>:
 800545e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005460:	4606      	mov	r6, r0
 8005462:	460f      	mov	r7, r1
 8005464:	4614      	mov	r4, r2
 8005466:	18d5      	adds	r5, r2, r3
 8005468:	42ac      	cmp	r4, r5
 800546a:	d101      	bne.n	8005470 <__sfputs_r+0x12>
 800546c:	2000      	movs	r0, #0
 800546e:	e007      	b.n	8005480 <__sfputs_r+0x22>
 8005470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005474:	463a      	mov	r2, r7
 8005476:	4630      	mov	r0, r6
 8005478:	f7ff ffda 	bl	8005430 <__sfputc_r>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d1f3      	bne.n	8005468 <__sfputs_r+0xa>
 8005480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005484 <_vfiprintf_r>:
 8005484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005488:	460d      	mov	r5, r1
 800548a:	b09d      	sub	sp, #116	; 0x74
 800548c:	4614      	mov	r4, r2
 800548e:	4698      	mov	r8, r3
 8005490:	4606      	mov	r6, r0
 8005492:	b118      	cbz	r0, 800549c <_vfiprintf_r+0x18>
 8005494:	6a03      	ldr	r3, [r0, #32]
 8005496:	b90b      	cbnz	r3, 800549c <_vfiprintf_r+0x18>
 8005498:	f7ff f9c0 	bl	800481c <__sinit>
 800549c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800549e:	07d9      	lsls	r1, r3, #31
 80054a0:	d405      	bmi.n	80054ae <_vfiprintf_r+0x2a>
 80054a2:	89ab      	ldrh	r3, [r5, #12]
 80054a4:	059a      	lsls	r2, r3, #22
 80054a6:	d402      	bmi.n	80054ae <_vfiprintf_r+0x2a>
 80054a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054aa:	f7ff fb47 	bl	8004b3c <__retarget_lock_acquire_recursive>
 80054ae:	89ab      	ldrh	r3, [r5, #12]
 80054b0:	071b      	lsls	r3, r3, #28
 80054b2:	d501      	bpl.n	80054b8 <_vfiprintf_r+0x34>
 80054b4:	692b      	ldr	r3, [r5, #16]
 80054b6:	b99b      	cbnz	r3, 80054e0 <_vfiprintf_r+0x5c>
 80054b8:	4629      	mov	r1, r5
 80054ba:	4630      	mov	r0, r6
 80054bc:	f000 f93a 	bl	8005734 <__swsetup_r>
 80054c0:	b170      	cbz	r0, 80054e0 <_vfiprintf_r+0x5c>
 80054c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054c4:	07dc      	lsls	r4, r3, #31
 80054c6:	d504      	bpl.n	80054d2 <_vfiprintf_r+0x4e>
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	b01d      	add	sp, #116	; 0x74
 80054ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d2:	89ab      	ldrh	r3, [r5, #12]
 80054d4:	0598      	lsls	r0, r3, #22
 80054d6:	d4f7      	bmi.n	80054c8 <_vfiprintf_r+0x44>
 80054d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054da:	f7ff fb30 	bl	8004b3e <__retarget_lock_release_recursive>
 80054de:	e7f3      	b.n	80054c8 <_vfiprintf_r+0x44>
 80054e0:	2300      	movs	r3, #0
 80054e2:	9309      	str	r3, [sp, #36]	; 0x24
 80054e4:	2320      	movs	r3, #32
 80054e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ee:	2330      	movs	r3, #48	; 0x30
 80054f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80056a4 <_vfiprintf_r+0x220>
 80054f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054f8:	f04f 0901 	mov.w	r9, #1
 80054fc:	4623      	mov	r3, r4
 80054fe:	469a      	mov	sl, r3
 8005500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005504:	b10a      	cbz	r2, 800550a <_vfiprintf_r+0x86>
 8005506:	2a25      	cmp	r2, #37	; 0x25
 8005508:	d1f9      	bne.n	80054fe <_vfiprintf_r+0x7a>
 800550a:	ebba 0b04 	subs.w	fp, sl, r4
 800550e:	d00b      	beq.n	8005528 <_vfiprintf_r+0xa4>
 8005510:	465b      	mov	r3, fp
 8005512:	4622      	mov	r2, r4
 8005514:	4629      	mov	r1, r5
 8005516:	4630      	mov	r0, r6
 8005518:	f7ff ffa1 	bl	800545e <__sfputs_r>
 800551c:	3001      	adds	r0, #1
 800551e:	f000 80a9 	beq.w	8005674 <_vfiprintf_r+0x1f0>
 8005522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005524:	445a      	add	r2, fp
 8005526:	9209      	str	r2, [sp, #36]	; 0x24
 8005528:	f89a 3000 	ldrb.w	r3, [sl]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80a1 	beq.w	8005674 <_vfiprintf_r+0x1f0>
 8005532:	2300      	movs	r3, #0
 8005534:	f04f 32ff 	mov.w	r2, #4294967295
 8005538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800553c:	f10a 0a01 	add.w	sl, sl, #1
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	9307      	str	r3, [sp, #28]
 8005544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005548:	931a      	str	r3, [sp, #104]	; 0x68
 800554a:	4654      	mov	r4, sl
 800554c:	2205      	movs	r2, #5
 800554e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005552:	4854      	ldr	r0, [pc, #336]	; (80056a4 <_vfiprintf_r+0x220>)
 8005554:	f7fa fe5c 	bl	8000210 <memchr>
 8005558:	9a04      	ldr	r2, [sp, #16]
 800555a:	b9d8      	cbnz	r0, 8005594 <_vfiprintf_r+0x110>
 800555c:	06d1      	lsls	r1, r2, #27
 800555e:	bf44      	itt	mi
 8005560:	2320      	movmi	r3, #32
 8005562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005566:	0713      	lsls	r3, r2, #28
 8005568:	bf44      	itt	mi
 800556a:	232b      	movmi	r3, #43	; 0x2b
 800556c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005570:	f89a 3000 	ldrb.w	r3, [sl]
 8005574:	2b2a      	cmp	r3, #42	; 0x2a
 8005576:	d015      	beq.n	80055a4 <_vfiprintf_r+0x120>
 8005578:	9a07      	ldr	r2, [sp, #28]
 800557a:	4654      	mov	r4, sl
 800557c:	2000      	movs	r0, #0
 800557e:	f04f 0c0a 	mov.w	ip, #10
 8005582:	4621      	mov	r1, r4
 8005584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005588:	3b30      	subs	r3, #48	; 0x30
 800558a:	2b09      	cmp	r3, #9
 800558c:	d94d      	bls.n	800562a <_vfiprintf_r+0x1a6>
 800558e:	b1b0      	cbz	r0, 80055be <_vfiprintf_r+0x13a>
 8005590:	9207      	str	r2, [sp, #28]
 8005592:	e014      	b.n	80055be <_vfiprintf_r+0x13a>
 8005594:	eba0 0308 	sub.w	r3, r0, r8
 8005598:	fa09 f303 	lsl.w	r3, r9, r3
 800559c:	4313      	orrs	r3, r2
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	46a2      	mov	sl, r4
 80055a2:	e7d2      	b.n	800554a <_vfiprintf_r+0xc6>
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	1d19      	adds	r1, r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	9103      	str	r1, [sp, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bfbb      	ittet	lt
 80055b0:	425b      	neglt	r3, r3
 80055b2:	f042 0202 	orrlt.w	r2, r2, #2
 80055b6:	9307      	strge	r3, [sp, #28]
 80055b8:	9307      	strlt	r3, [sp, #28]
 80055ba:	bfb8      	it	lt
 80055bc:	9204      	strlt	r2, [sp, #16]
 80055be:	7823      	ldrb	r3, [r4, #0]
 80055c0:	2b2e      	cmp	r3, #46	; 0x2e
 80055c2:	d10c      	bne.n	80055de <_vfiprintf_r+0x15a>
 80055c4:	7863      	ldrb	r3, [r4, #1]
 80055c6:	2b2a      	cmp	r3, #42	; 0x2a
 80055c8:	d134      	bne.n	8005634 <_vfiprintf_r+0x1b0>
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	1d1a      	adds	r2, r3, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	9203      	str	r2, [sp, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfb8      	it	lt
 80055d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80055da:	3402      	adds	r4, #2
 80055dc:	9305      	str	r3, [sp, #20]
 80055de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80056b4 <_vfiprintf_r+0x230>
 80055e2:	7821      	ldrb	r1, [r4, #0]
 80055e4:	2203      	movs	r2, #3
 80055e6:	4650      	mov	r0, sl
 80055e8:	f7fa fe12 	bl	8000210 <memchr>
 80055ec:	b138      	cbz	r0, 80055fe <_vfiprintf_r+0x17a>
 80055ee:	9b04      	ldr	r3, [sp, #16]
 80055f0:	eba0 000a 	sub.w	r0, r0, sl
 80055f4:	2240      	movs	r2, #64	; 0x40
 80055f6:	4082      	lsls	r2, r0
 80055f8:	4313      	orrs	r3, r2
 80055fa:	3401      	adds	r4, #1
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005602:	4829      	ldr	r0, [pc, #164]	; (80056a8 <_vfiprintf_r+0x224>)
 8005604:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005608:	2206      	movs	r2, #6
 800560a:	f7fa fe01 	bl	8000210 <memchr>
 800560e:	2800      	cmp	r0, #0
 8005610:	d03f      	beq.n	8005692 <_vfiprintf_r+0x20e>
 8005612:	4b26      	ldr	r3, [pc, #152]	; (80056ac <_vfiprintf_r+0x228>)
 8005614:	bb1b      	cbnz	r3, 800565e <_vfiprintf_r+0x1da>
 8005616:	9b03      	ldr	r3, [sp, #12]
 8005618:	3307      	adds	r3, #7
 800561a:	f023 0307 	bic.w	r3, r3, #7
 800561e:	3308      	adds	r3, #8
 8005620:	9303      	str	r3, [sp, #12]
 8005622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005624:	443b      	add	r3, r7
 8005626:	9309      	str	r3, [sp, #36]	; 0x24
 8005628:	e768      	b.n	80054fc <_vfiprintf_r+0x78>
 800562a:	fb0c 3202 	mla	r2, ip, r2, r3
 800562e:	460c      	mov	r4, r1
 8005630:	2001      	movs	r0, #1
 8005632:	e7a6      	b.n	8005582 <_vfiprintf_r+0xfe>
 8005634:	2300      	movs	r3, #0
 8005636:	3401      	adds	r4, #1
 8005638:	9305      	str	r3, [sp, #20]
 800563a:	4619      	mov	r1, r3
 800563c:	f04f 0c0a 	mov.w	ip, #10
 8005640:	4620      	mov	r0, r4
 8005642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005646:	3a30      	subs	r2, #48	; 0x30
 8005648:	2a09      	cmp	r2, #9
 800564a:	d903      	bls.n	8005654 <_vfiprintf_r+0x1d0>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0c6      	beq.n	80055de <_vfiprintf_r+0x15a>
 8005650:	9105      	str	r1, [sp, #20]
 8005652:	e7c4      	b.n	80055de <_vfiprintf_r+0x15a>
 8005654:	fb0c 2101 	mla	r1, ip, r1, r2
 8005658:	4604      	mov	r4, r0
 800565a:	2301      	movs	r3, #1
 800565c:	e7f0      	b.n	8005640 <_vfiprintf_r+0x1bc>
 800565e:	ab03      	add	r3, sp, #12
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	462a      	mov	r2, r5
 8005664:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <_vfiprintf_r+0x22c>)
 8005666:	a904      	add	r1, sp, #16
 8005668:	4630      	mov	r0, r6
 800566a:	f3af 8000 	nop.w
 800566e:	4607      	mov	r7, r0
 8005670:	1c78      	adds	r0, r7, #1
 8005672:	d1d6      	bne.n	8005622 <_vfiprintf_r+0x19e>
 8005674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005676:	07d9      	lsls	r1, r3, #31
 8005678:	d405      	bmi.n	8005686 <_vfiprintf_r+0x202>
 800567a:	89ab      	ldrh	r3, [r5, #12]
 800567c:	059a      	lsls	r2, r3, #22
 800567e:	d402      	bmi.n	8005686 <_vfiprintf_r+0x202>
 8005680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005682:	f7ff fa5c 	bl	8004b3e <__retarget_lock_release_recursive>
 8005686:	89ab      	ldrh	r3, [r5, #12]
 8005688:	065b      	lsls	r3, r3, #25
 800568a:	f53f af1d 	bmi.w	80054c8 <_vfiprintf_r+0x44>
 800568e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005690:	e71c      	b.n	80054cc <_vfiprintf_r+0x48>
 8005692:	ab03      	add	r3, sp, #12
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	462a      	mov	r2, r5
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <_vfiprintf_r+0x22c>)
 800569a:	a904      	add	r1, sp, #16
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff fc87 	bl	8004fb0 <_printf_i>
 80056a2:	e7e4      	b.n	800566e <_vfiprintf_r+0x1ea>
 80056a4:	08005c26 	.word	0x08005c26
 80056a8:	08005c30 	.word	0x08005c30
 80056ac:	00000000 	.word	0x00000000
 80056b0:	0800545f 	.word	0x0800545f
 80056b4:	08005c2c 	.word	0x08005c2c

080056b8 <__swbuf_r>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	460e      	mov	r6, r1
 80056bc:	4614      	mov	r4, r2
 80056be:	4605      	mov	r5, r0
 80056c0:	b118      	cbz	r0, 80056ca <__swbuf_r+0x12>
 80056c2:	6a03      	ldr	r3, [r0, #32]
 80056c4:	b90b      	cbnz	r3, 80056ca <__swbuf_r+0x12>
 80056c6:	f7ff f8a9 	bl	800481c <__sinit>
 80056ca:	69a3      	ldr	r3, [r4, #24]
 80056cc:	60a3      	str	r3, [r4, #8]
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	071a      	lsls	r2, r3, #28
 80056d2:	d525      	bpl.n	8005720 <__swbuf_r+0x68>
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	b31b      	cbz	r3, 8005720 <__swbuf_r+0x68>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	6922      	ldr	r2, [r4, #16]
 80056dc:	1a98      	subs	r0, r3, r2
 80056de:	6963      	ldr	r3, [r4, #20]
 80056e0:	b2f6      	uxtb	r6, r6
 80056e2:	4283      	cmp	r3, r0
 80056e4:	4637      	mov	r7, r6
 80056e6:	dc04      	bgt.n	80056f2 <__swbuf_r+0x3a>
 80056e8:	4621      	mov	r1, r4
 80056ea:	4628      	mov	r0, r5
 80056ec:	f7ff fe08 	bl	8005300 <_fflush_r>
 80056f0:	b9e0      	cbnz	r0, 800572c <__swbuf_r+0x74>
 80056f2:	68a3      	ldr	r3, [r4, #8]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	60a3      	str	r3, [r4, #8]
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	6022      	str	r2, [r4, #0]
 80056fe:	701e      	strb	r6, [r3, #0]
 8005700:	6962      	ldr	r2, [r4, #20]
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	429a      	cmp	r2, r3
 8005706:	d004      	beq.n	8005712 <__swbuf_r+0x5a>
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	07db      	lsls	r3, r3, #31
 800570c:	d506      	bpl.n	800571c <__swbuf_r+0x64>
 800570e:	2e0a      	cmp	r6, #10
 8005710:	d104      	bne.n	800571c <__swbuf_r+0x64>
 8005712:	4621      	mov	r1, r4
 8005714:	4628      	mov	r0, r5
 8005716:	f7ff fdf3 	bl	8005300 <_fflush_r>
 800571a:	b938      	cbnz	r0, 800572c <__swbuf_r+0x74>
 800571c:	4638      	mov	r0, r7
 800571e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005720:	4621      	mov	r1, r4
 8005722:	4628      	mov	r0, r5
 8005724:	f000 f806 	bl	8005734 <__swsetup_r>
 8005728:	2800      	cmp	r0, #0
 800572a:	d0d5      	beq.n	80056d8 <__swbuf_r+0x20>
 800572c:	f04f 37ff 	mov.w	r7, #4294967295
 8005730:	e7f4      	b.n	800571c <__swbuf_r+0x64>
	...

08005734 <__swsetup_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <__swsetup_r+0xac>)
 8005738:	4605      	mov	r5, r0
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	460c      	mov	r4, r1
 800573e:	b118      	cbz	r0, 8005748 <__swsetup_r+0x14>
 8005740:	6a03      	ldr	r3, [r0, #32]
 8005742:	b90b      	cbnz	r3, 8005748 <__swsetup_r+0x14>
 8005744:	f7ff f86a 	bl	800481c <__sinit>
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800574e:	0718      	lsls	r0, r3, #28
 8005750:	d422      	bmi.n	8005798 <__swsetup_r+0x64>
 8005752:	06d9      	lsls	r1, r3, #27
 8005754:	d407      	bmi.n	8005766 <__swsetup_r+0x32>
 8005756:	2309      	movs	r3, #9
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	e034      	b.n	80057d0 <__swsetup_r+0x9c>
 8005766:	0758      	lsls	r0, r3, #29
 8005768:	d512      	bpl.n	8005790 <__swsetup_r+0x5c>
 800576a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800576c:	b141      	cbz	r1, 8005780 <__swsetup_r+0x4c>
 800576e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005772:	4299      	cmp	r1, r3
 8005774:	d002      	beq.n	800577c <__swsetup_r+0x48>
 8005776:	4628      	mov	r0, r5
 8005778:	f7ff fa00 	bl	8004b7c <_free_r>
 800577c:	2300      	movs	r3, #0
 800577e:	6363      	str	r3, [r4, #52]	; 0x34
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	2300      	movs	r3, #0
 800578a:	6063      	str	r3, [r4, #4]
 800578c:	6923      	ldr	r3, [r4, #16]
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	89a3      	ldrh	r3, [r4, #12]
 8005792:	f043 0308 	orr.w	r3, r3, #8
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	b94b      	cbnz	r3, 80057b0 <__swsetup_r+0x7c>
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a6:	d003      	beq.n	80057b0 <__swsetup_r+0x7c>
 80057a8:	4621      	mov	r1, r4
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f88c 	bl	80058c8 <__smakebuf_r>
 80057b0:	89a0      	ldrh	r0, [r4, #12]
 80057b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057b6:	f010 0301 	ands.w	r3, r0, #1
 80057ba:	d00a      	beq.n	80057d2 <__swsetup_r+0x9e>
 80057bc:	2300      	movs	r3, #0
 80057be:	60a3      	str	r3, [r4, #8]
 80057c0:	6963      	ldr	r3, [r4, #20]
 80057c2:	425b      	negs	r3, r3
 80057c4:	61a3      	str	r3, [r4, #24]
 80057c6:	6923      	ldr	r3, [r4, #16]
 80057c8:	b943      	cbnz	r3, 80057dc <__swsetup_r+0xa8>
 80057ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057ce:	d1c4      	bne.n	800575a <__swsetup_r+0x26>
 80057d0:	bd38      	pop	{r3, r4, r5, pc}
 80057d2:	0781      	lsls	r1, r0, #30
 80057d4:	bf58      	it	pl
 80057d6:	6963      	ldrpl	r3, [r4, #20]
 80057d8:	60a3      	str	r3, [r4, #8]
 80057da:	e7f4      	b.n	80057c6 <__swsetup_r+0x92>
 80057dc:	2000      	movs	r0, #0
 80057de:	e7f7      	b.n	80057d0 <__swsetup_r+0x9c>
 80057e0:	20000064 	.word	0x20000064

080057e4 <_raise_r>:
 80057e4:	291f      	cmp	r1, #31
 80057e6:	b538      	push	{r3, r4, r5, lr}
 80057e8:	4604      	mov	r4, r0
 80057ea:	460d      	mov	r5, r1
 80057ec:	d904      	bls.n	80057f8 <_raise_r+0x14>
 80057ee:	2316      	movs	r3, #22
 80057f0:	6003      	str	r3, [r0, #0]
 80057f2:	f04f 30ff 	mov.w	r0, #4294967295
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80057fa:	b112      	cbz	r2, 8005802 <_raise_r+0x1e>
 80057fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005800:	b94b      	cbnz	r3, 8005816 <_raise_r+0x32>
 8005802:	4620      	mov	r0, r4
 8005804:	f000 f830 	bl	8005868 <_getpid_r>
 8005808:	462a      	mov	r2, r5
 800580a:	4601      	mov	r1, r0
 800580c:	4620      	mov	r0, r4
 800580e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005812:	f000 b817 	b.w	8005844 <_kill_r>
 8005816:	2b01      	cmp	r3, #1
 8005818:	d00a      	beq.n	8005830 <_raise_r+0x4c>
 800581a:	1c59      	adds	r1, r3, #1
 800581c:	d103      	bne.n	8005826 <_raise_r+0x42>
 800581e:	2316      	movs	r3, #22
 8005820:	6003      	str	r3, [r0, #0]
 8005822:	2001      	movs	r0, #1
 8005824:	e7e7      	b.n	80057f6 <_raise_r+0x12>
 8005826:	2400      	movs	r4, #0
 8005828:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800582c:	4628      	mov	r0, r5
 800582e:	4798      	blx	r3
 8005830:	2000      	movs	r0, #0
 8005832:	e7e0      	b.n	80057f6 <_raise_r+0x12>

08005834 <raise>:
 8005834:	4b02      	ldr	r3, [pc, #8]	; (8005840 <raise+0xc>)
 8005836:	4601      	mov	r1, r0
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	f7ff bfd3 	b.w	80057e4 <_raise_r>
 800583e:	bf00      	nop
 8005840:	20000064 	.word	0x20000064

08005844 <_kill_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4d07      	ldr	r5, [pc, #28]	; (8005864 <_kill_r+0x20>)
 8005848:	2300      	movs	r3, #0
 800584a:	4604      	mov	r4, r0
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	f7fb fe13 	bl	800147c <_kill>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	d102      	bne.n	8005860 <_kill_r+0x1c>
 800585a:	682b      	ldr	r3, [r5, #0]
 800585c:	b103      	cbz	r3, 8005860 <_kill_r+0x1c>
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	bd38      	pop	{r3, r4, r5, pc}
 8005862:	bf00      	nop
 8005864:	20000280 	.word	0x20000280

08005868 <_getpid_r>:
 8005868:	f7fb be00 	b.w	800146c <_getpid>

0800586c <_malloc_usable_size_r>:
 800586c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005870:	1f18      	subs	r0, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	bfbc      	itt	lt
 8005876:	580b      	ldrlt	r3, [r1, r0]
 8005878:	18c0      	addlt	r0, r0, r3
 800587a:	4770      	bx	lr

0800587c <__swhatbuf_r>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	460c      	mov	r4, r1
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	2900      	cmp	r1, #0
 8005886:	b096      	sub	sp, #88	; 0x58
 8005888:	4615      	mov	r5, r2
 800588a:	461e      	mov	r6, r3
 800588c:	da0d      	bge.n	80058aa <__swhatbuf_r+0x2e>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	bf0c      	ite	eq
 800589a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800589e:	2340      	movne	r3, #64	; 0x40
 80058a0:	2000      	movs	r0, #0
 80058a2:	6031      	str	r1, [r6, #0]
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	b016      	add	sp, #88	; 0x58
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
 80058aa:	466a      	mov	r2, sp
 80058ac:	f000 f848 	bl	8005940 <_fstat_r>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	dbec      	blt.n	800588e <__swhatbuf_r+0x12>
 80058b4:	9901      	ldr	r1, [sp, #4]
 80058b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80058ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80058be:	4259      	negs	r1, r3
 80058c0:	4159      	adcs	r1, r3
 80058c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058c6:	e7eb      	b.n	80058a0 <__swhatbuf_r+0x24>

080058c8 <__smakebuf_r>:
 80058c8:	898b      	ldrh	r3, [r1, #12]
 80058ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058cc:	079d      	lsls	r5, r3, #30
 80058ce:	4606      	mov	r6, r0
 80058d0:	460c      	mov	r4, r1
 80058d2:	d507      	bpl.n	80058e4 <__smakebuf_r+0x1c>
 80058d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	2301      	movs	r3, #1
 80058de:	6163      	str	r3, [r4, #20]
 80058e0:	b002      	add	sp, #8
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	ab01      	add	r3, sp, #4
 80058e6:	466a      	mov	r2, sp
 80058e8:	f7ff ffc8 	bl	800587c <__swhatbuf_r>
 80058ec:	9900      	ldr	r1, [sp, #0]
 80058ee:	4605      	mov	r5, r0
 80058f0:	4630      	mov	r0, r6
 80058f2:	f7fe fe01 	bl	80044f8 <_malloc_r>
 80058f6:	b948      	cbnz	r0, 800590c <__smakebuf_r+0x44>
 80058f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fc:	059a      	lsls	r2, r3, #22
 80058fe:	d4ef      	bmi.n	80058e0 <__smakebuf_r+0x18>
 8005900:	f023 0303 	bic.w	r3, r3, #3
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	e7e3      	b.n	80058d4 <__smakebuf_r+0xc>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	6020      	str	r0, [r4, #0]
 8005910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005914:	81a3      	strh	r3, [r4, #12]
 8005916:	9b00      	ldr	r3, [sp, #0]
 8005918:	6163      	str	r3, [r4, #20]
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	6120      	str	r0, [r4, #16]
 800591e:	b15b      	cbz	r3, 8005938 <__smakebuf_r+0x70>
 8005920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005924:	4630      	mov	r0, r6
 8005926:	f000 f81d 	bl	8005964 <_isatty_r>
 800592a:	b128      	cbz	r0, 8005938 <__smakebuf_r+0x70>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	431d      	orrs	r5, r3
 800593c:	81a5      	strh	r5, [r4, #12]
 800593e:	e7cf      	b.n	80058e0 <__smakebuf_r+0x18>

08005940 <_fstat_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4d07      	ldr	r5, [pc, #28]	; (8005960 <_fstat_r+0x20>)
 8005944:	2300      	movs	r3, #0
 8005946:	4604      	mov	r4, r0
 8005948:	4608      	mov	r0, r1
 800594a:	4611      	mov	r1, r2
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	f7fb fdf4 	bl	800153a <_fstat>
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	d102      	bne.n	800595c <_fstat_r+0x1c>
 8005956:	682b      	ldr	r3, [r5, #0]
 8005958:	b103      	cbz	r3, 800595c <_fstat_r+0x1c>
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	bd38      	pop	{r3, r4, r5, pc}
 800595e:	bf00      	nop
 8005960:	20000280 	.word	0x20000280

08005964 <_isatty_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	4d06      	ldr	r5, [pc, #24]	; (8005980 <_isatty_r+0x1c>)
 8005968:	2300      	movs	r3, #0
 800596a:	4604      	mov	r4, r0
 800596c:	4608      	mov	r0, r1
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	f7fb fdf3 	bl	800155a <_isatty>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_isatty_r+0x1a>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_isatty_r+0x1a>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	20000280 	.word	0x20000280

08005984 <_init>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr

08005990 <_fini>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	bf00      	nop
 8005994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005996:	bc08      	pop	{r3}
 8005998:	469e      	mov	lr, r3
 800599a:	4770      	bx	lr
